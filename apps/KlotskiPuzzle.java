import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.*;
import java.util.List;

// ÊñáÊú¨ÁÆ°ÁêÜÈùôÊÄÅÂÜÖÈÉ®Á±ª
static class Texts {
    // Á™óÂè£Ê†áÈ¢ò
    static final String WINDOW_TITLE = "üèØ ÂçéÂÆπÈÅìÊ∏∏Êàè";

    // ÁïåÈù¢Ê†áÁ≠æ
    static final String STATUS_LABEL = "Áä∂ÊÄÅ: ";
    static final String MOVES_LABEL = "ÁßªÂä®Ê¨°Êï∞: ";
    static final String TIME_LABEL = "Êó∂Èó¥: ";
    static final String RESET_BUTTON = "ÈáçÊñ∞ÂºÄÂßã";
    static final String NEW_GAME_BUTTON = "Êñ∞Ê∏∏Êàè";
    static final String HELP_BUTTON = "Â∏ÆÂä©";

    // Ê∏∏ÊàèÁä∂ÊÄÅ
    static final String STATUS_START_GAME = "ÊãñÊãΩÊñπÂùóÂºÄÂßãÊ∏∏Êàè";
    static final String STATUS_DRAG_PIECE = "ÊãñÊãΩÊñπÂùóÁßªÂä®";
    static final String STATUS_PIECE_MOVED = "ÊñπÂùóÁßªÂä®ÊàêÂäü";
    static final String STATUS_CANNOT_MOVE = "Êó†Ê≥ïÁßªÂä®Âà∞ËØ•‰ΩçÁΩÆ";
    static final String STATUS_GAME_COMPLETED = "üéâ ÊÅ≠ÂñúÔºÅÊàêÂäüÊïëÂá∫ÊõπÊìçÔºÅ";
    static final String STATUS_NEW_GAME_STARTED = "Êñ∞Ê∏∏ÊàèÂºÄÂßã";

    // ‰∫∫Áâ©ÂêçÁß∞
    static final String PIECE_CAO_CAO = "ÊõπÊìç";
    static final String PIECE_GUAN_YU = "ÂÖ≥ÁæΩ";
    static final String PIECE_ZHANG_FEI = "Âº†È£û";
    static final String PIECE_ZHAO_YUN = "Ëµµ‰∫ë";
    static final String PIECE_MA_CHAO = "È©¨Ë∂Ö";
    static final String PIECE_HUANG_ZHONG = "ÈªÑÂø†";
    static final String PIECE_SOLDIER = "ÂÖµ";

    // ÂÆåÊàêÊ∂àÊÅØ
    static final String COMPLETION_MESSAGE = "ÂçéÂÆπÈÅìÂÆåÊàêÔºÅ\nÁßªÂä®Ê¨°Êï∞: %d\nÁî®Êó∂: %02d:%02d";
    static final String COMPLETION_TITLE = "Ê∏∏ÊàèÂÆåÊàê";

    // Â∏ÆÂä©‰ø°ÊÅØ
    static final String HELP_MESSAGE = """
        ÂçéÂÆπÈÅìÊ∏∏Êàè‰ΩøÁî®ËØ¥ÊòéÔºö

        ‚Ä¢ Ê∏∏ÊàèÁõÆÊ†áÔºöÈÄöËøáÁßªÂä®ÊªëÂùóÔºåÂ∞ÜÊõπÊìçÔºàÁ∫¢Ëâ≤Â§ßÂùóÔºâÁßªÂä®Âà∞Âá∫Âè£‰ΩçÁΩÆ
        ‚Ä¢ Ê∏∏ÊàèËßÑÂàôÔºöÂè™ËÉΩÊ∞¥Âπ≥ÊàñÂûÇÁõ¥ÁßªÂä®ÊªëÂùóÔºå‰∏çËÉΩÈáçÂè†
        ‚Ä¢ ËÆ°ÂàÜËßÑÂàôÔºöÁßªÂä®Ê¨°Êï∞Ë∂äÂ∞ëÔºåÁî®Êó∂Ë∂äÁü≠Ë∂äÂ•Ω

        Êìç‰ΩúËØ¥ÊòéÔºö
        ‚Ä¢ Èº†Ê†áÊãñÊãΩÔºöÈÄâÊã©Âπ∂ÁßªÂä®ÊªëÂùó
        ‚Ä¢ Âè™ËÉΩÁßªÂä®Âà∞Á©∫ÁôΩ‰ΩçÁΩÆ
        ‚Ä¢ Â§ßÊªëÂùóÈúÄË¶ÅÊõ¥Â§öÁ©∫Èó¥

        ‰∫∫Áâ©ËØ¥ÊòéÔºö
        ‚Ä¢ ÊõπÊìçÔºàÁ∫¢Ëâ≤Ôºå2x2ÔºâÔºöÁõÆÊ†á‰∫∫Áâ©ÔºåÈúÄË¶ÅÁßªÂä®Âà∞Âá∫Âè£
        ‚Ä¢ ÂÖ≥ÁæΩÔºàÁªøËâ≤Ôºå2x1ÔºâÔºöÊ®™ÂêëÈïøÊù°
        ‚Ä¢ Âº†È£û„ÄÅËµµ‰∫ë„ÄÅÈ©¨Ë∂Ö„ÄÅÈªÑÂø†ÔºàÂêÑ1x2ÔºâÔºöÁ∫µÂêëÈïøÊù°
        ‚Ä¢ ÂÖµÔºàËìùËâ≤Ôºå1x1ÔºâÔºöÂ∞èÊñπÂùó

        Ê∏∏ÊàèÊäÄÂ∑ßÔºö
        ‚Ä¢ ‰ºòÂÖà‰∏∫ÊõπÊìçÂàõÈÄ†ÁßªÂä®Á©∫Èó¥
        ‚Ä¢ Ê≥®ÊÑèÂ§ßÊªëÂùóÁöÑÁßªÂä®Ë∑ØÂæÑ
        ‚Ä¢ ÂêàÁêÜËßÑÂàíÁßªÂä®È°∫Â∫è
        ‚Ä¢ ÈÅøÂÖçÂ∞ÜÂ∞èÊªëÂùóÂ†µÊ≠ª

        ÂéÜÂè≤ËÉåÊôØÔºö
        ÂçéÂÆπÈÅìÊòØ‰∏≠ÂõΩ‰º†ÁªüÁõäÊô∫Ê∏∏ÊàèÔºåÊ∫êËá™‰∏âÂõΩÊó∂ÊúüÊõπÊìçË¥•Ëµ∞ÂçéÂÆπÈÅìÁöÑÂÖ∏ÊïÖ„ÄÇ
        Ê∏∏ÊàèÁöÑÁõÆÊ†áÊòØÈÄöËøáÁßªÂä®ÂêÑ‰∏™ÊªëÂùóÔºå‰∏∫ÊõπÊìçËÆ©Âá∫‰∏ÄÊù°ÈÄÉÁîüÁöÑÈÅìË∑Ø„ÄÇ

        Âø´Êç∑ÈîÆÔºö
        Ctrl+N - Êñ∞Ê∏∏Êàè
        Ctrl+R - ÈáçÊñ∞ÂºÄÂßã
        Ctrl+H - ÊòæÁ§∫Â∏ÆÂä©
        F1 - ÊòæÁ§∫Â∏ÆÂä©
        """;
}

/**
 * ÂçéÂÆπÈÅìÊ∏∏Êàè
 * ÁªèÂÖ∏ÁöÑÊªëÂùóÊãºÂõæÊ∏∏ÊàèÔºåÁõÆÊ†áÊòØÂ∞ÜÊõπÊìçÔºàÁ∫¢Ëâ≤Â§ßÂùóÔºâÁßªÂä®Âà∞Âá∫Âè£
 */
void main(String[] args) {
    SwingUtilities.invokeLater(() -> {
        new KlotskiPuzzle().setVisible(true);
    });
}

class KlotskiPuzzle extends JFrame {
    private static final int BOARD_WIDTH = 4;
    private static final int BOARD_HEIGHT = 5;
    private static final int CELL_SIZE = 80;
    private static final int BOARD_PIXEL_WIDTH = BOARD_WIDTH * CELL_SIZE;
    private static final int BOARD_PIXEL_HEIGHT = BOARD_HEIGHT * CELL_SIZE;
    
    private GameBoard gameBoard;
    private List<GamePiece> pieces;
    private GamePiece selectedPiece;
    private Point dragStart;
    private int moveCount;
    private long startTime;
    private boolean gameWon;
    
    private JLabel statusLabel;
    private javax.swing.Timer timer;
    private int elapsedSeconds;
    
    public KlotskiPuzzle() {
        initializeUI();
        initializeGame();
        setupKeyboardShortcuts();
        startTimer();
    }
    
    private void initializeUI() {
        setTitle(Texts.WINDOW_TITLE);
        setSize(BOARD_PIXEL_WIDTH + 200, BOARD_PIXEL_HEIGHT + 100);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        setResizable(false);
        
        // ‰∏ªÈù¢Êùø
        JPanel mainPanel = new JPanel(new BorderLayout());
        add(mainPanel);
        
        // Ê∏∏ÊàèÈù¢Êùø
        gameBoard = new GameBoard();
        gameBoard.setPreferredSize(new Dimension(BOARD_PIXEL_WIDTH, BOARD_PIXEL_HEIGHT));
        gameBoard.setBackground(new Color(139, 69, 19)); // Ê£ïËâ≤ËÉåÊôØ
        
        // Ê∑ªÂä†Èº†Ê†áÁõëÂê¨Âô®
        MouseAdapter mouseHandler = new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                handleMousePressed(e);
            }
            
            @Override
            public void mouseDragged(MouseEvent e) {
                handleMouseDragged(e);
            }
            
            @Override
            public void mouseReleased(MouseEvent e) {
                handleMouseReleased(e);
            }
        };
        
        gameBoard.addMouseListener(mouseHandler);
        gameBoard.addMouseMotionListener(mouseHandler);
        
        mainPanel.add(gameBoard, BorderLayout.CENTER);
        
        // Âè≥‰æß‰ø°ÊÅØÈù¢Êùø
        JPanel infoPanel = new JPanel();
        infoPanel.setLayout(new BoxLayout(infoPanel, BoxLayout.Y_AXIS));
        infoPanel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
        infoPanel.setPreferredSize(new Dimension(180, BOARD_PIXEL_HEIGHT));
        
        // Ê∏∏Êàè‰ø°ÊÅØ
        JLabel titleLabel = new JLabel("ÂçéÂÆπÈÅì");
        titleLabel.setFont(new Font("SF Pro Display", Font.BOLD, 20));
        titleLabel.setAlignmentX(Component.CENTER_ALIGNMENT);

        statusLabel = new JLabel();
        statusLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
        updateStatusLabel();
        
        // Ê∏∏ÊàèËØ¥Êòé
        JTextArea instructionArea = new JTextArea();
        instructionArea.setText("Ê∏∏ÊàèÁõÆÊ†áÔºö\nÂ∞ÜÊõπÊìçÔºàÁ∫¢Ëâ≤Â§ßÂùóÔºâ\nÁßªÂä®Âà∞Â∫ïÈÉ®Âá∫Âè£\n\nÊìç‰ΩúÊñπÊ≥ïÔºö\nÊãñÊãΩÊñπÂùóÁßªÂä®\n\n‰∫∫Áâ©‰ªãÁªçÔºö\nÁ∫¢Ëâ≤-ÊõπÊìç\nËìùËâ≤-ÂÖ≥ÁæΩ\nÁªøËâ≤-Âº†È£û„ÄÅËµµ‰∫ë\nÈªÑËâ≤-È©¨Ë∂Ö„ÄÅÈªÑÂø†\nÁÅ∞Ëâ≤-ÂÖµÂçí");
        instructionArea.setEditable(false);
        instructionArea.setOpaque(false);
        instructionArea.setFont(new Font("SF Pro Display", Font.PLAIN, 12));
        instructionArea.setAlignmentX(Component.CENTER_ALIGNMENT);
        
        // ÊéßÂà∂ÊåâÈíÆ
        JButton resetBtn = new JButton(Texts.RESET_BUTTON);
        resetBtn.addActionListener(e -> resetGame());
        resetBtn.setAlignmentX(Component.CENTER_ALIGNMENT);

        JButton hintBtn = new JButton(Texts.HELP_BUTTON);
        hintBtn.addActionListener(e -> showHint());
        hintBtn.setAlignmentX(Component.CENTER_ALIGNMENT);

        JButton layoutBtn = new JButton("ÂàáÊç¢Â∏ÉÂ±Ä");
        layoutBtn.addActionListener(e -> switchLayout());
        layoutBtn.setAlignmentX(Component.CENTER_ALIGNMENT);
        
        infoPanel.add(titleLabel);
        infoPanel.add(Box.createVerticalStrut(20));
        infoPanel.add(statusLabel);
        infoPanel.add(Box.createVerticalStrut(20));
        infoPanel.add(instructionArea);
        infoPanel.add(Box.createVerticalStrut(20));
        infoPanel.add(resetBtn);
        infoPanel.add(Box.createVerticalStrut(10));
        infoPanel.add(hintBtn);
        infoPanel.add(Box.createVerticalStrut(10));
        infoPanel.add(layoutBtn);
        
        mainPanel.add(infoPanel, BorderLayout.EAST);
    }
    
    private void initializeGame() {
        pieces = new ArrayList<>();
        moveCount = 0;
        startTime = System.currentTimeMillis();
        elapsedSeconds = 0;
        gameWon = false;
        
        // ÂàõÂª∫ÁªèÂÖ∏ÂçéÂÆπÈÅìÂ∏ÉÂ±Ä
        createClassicLayout();
    }
    
    private void createClassicLayout() {
        pieces.clear();
        
        // ÊõπÊìç (2x2, Á∫¢Ëâ≤)
        pieces.add(new GamePiece("ÊõπÊìç", 1, 0, 2, 2, Color.RED, PieceType.CAOCAO));
        
        // ÂÖ≥ÁæΩ (2x1, ËìùËâ≤)
        pieces.add(new GamePiece("ÂÖ≥ÁæΩ", 1, 2, 2, 1, Color.BLUE, PieceType.GUANYU));
        
        // Âº†È£û (1x2, ÁªøËâ≤)
        pieces.add(new GamePiece("Âº†È£û", 0, 0, 1, 2, Color.GREEN, PieceType.ZHANGFEI));
        
        // Ëµµ‰∫ë (1x2, ÁªøËâ≤)
        pieces.add(new GamePiece("Ëµµ‰∫ë", 3, 0, 1, 2, Color.GREEN, PieceType.ZHAOYUN));
        
        // È©¨Ë∂Ö (1x2, ÈªÑËâ≤)
        pieces.add(new GamePiece("È©¨Ë∂Ö", 0, 2, 1, 2, Color.ORANGE, PieceType.MACHAO));
        
        // ÈªÑÂø† (1x2, ÈªÑËâ≤)
        pieces.add(new GamePiece("ÈªÑÂø†", 3, 2, 1, 2, Color.ORANGE, PieceType.HUANGZHONG));
        
        // ÂÖµÂçí1 (1x1, ÁÅ∞Ëâ≤)
        pieces.add(new GamePiece("ÂÖµ1", 1, 3, 1, 1, Color.LIGHT_GRAY, PieceType.SOLDIER));
        
        // ÂÖµÂçí2 (1x1, ÁÅ∞Ëâ≤)
        pieces.add(new GamePiece("ÂÖµ2", 2, 3, 1, 1, Color.LIGHT_GRAY, PieceType.SOLDIER));
        
        // ÂÖµÂçí3 (1x1, ÁÅ∞Ëâ≤)
        pieces.add(new GamePiece("ÂÖµ3", 0, 4, 1, 1, Color.LIGHT_GRAY, PieceType.SOLDIER));
        
        // ÂÖµÂçí4 (1x1, ÁÅ∞Ëâ≤)
        pieces.add(new GamePiece("ÂÖµ4", 3, 4, 1, 1, Color.LIGHT_GRAY, PieceType.SOLDIER));
    }
    
    private void createAlternativeLayout() {
        pieces.clear();
        
        // Âè¶‰∏ÄÁßçÁªèÂÖ∏Â∏ÉÂ±Ä
        pieces.add(new GamePiece("ÊõπÊìç", 0, 1, 2, 2, Color.RED, PieceType.CAOCAO));
        pieces.add(new GamePiece("ÂÖ≥ÁæΩ", 2, 1, 2, 1, Color.BLUE, PieceType.GUANYU));
        pieces.add(new GamePiece("Âº†È£û", 0, 0, 1, 1, Color.GREEN, PieceType.ZHANGFEI));
        pieces.add(new GamePiece("Ëµµ‰∫ë", 1, 0, 1, 1, Color.GREEN, PieceType.ZHAOYUN));
        pieces.add(new GamePiece("È©¨Ë∂Ö", 2, 0, 1, 1, Color.ORANGE, PieceType.MACHAO));
        pieces.add(new GamePiece("ÈªÑÂø†", 3, 0, 1, 1, Color.ORANGE, PieceType.HUANGZHONG));
        pieces.add(new GamePiece("ÂÖµ1", 0, 3, 1, 2, Color.LIGHT_GRAY, PieceType.SOLDIER));
        pieces.add(new GamePiece("ÂÖµ2", 3, 2, 1, 2, Color.LIGHT_GRAY, PieceType.SOLDIER));
        pieces.add(new GamePiece("ÂÖµ3", 1, 4, 1, 1, Color.LIGHT_GRAY, PieceType.SOLDIER));
        pieces.add(new GamePiece("ÂÖµ4", 2, 4, 1, 1, Color.LIGHT_GRAY, PieceType.SOLDIER));
    }
    
    private void startTimer() {
        timer = new javax.swing.Timer(1000, e -> {
            if (!gameWon) {
                elapsedSeconds++;
                updateStatusLabel();
            }
        });
        timer.start();
    }
    
    private void handleMousePressed(MouseEvent e) {
        if (gameWon) return;
        
        int gridX = e.getX() / CELL_SIZE;
        int gridY = e.getY() / CELL_SIZE;
        
        selectedPiece = findPieceAt(gridX, gridY);
        if (selectedPiece != null) {
            dragStart = new Point(e.getX(), e.getY());
        }
    }
    
    private void handleMouseDragged(MouseEvent e) {
        if (selectedPiece != null && dragStart != null) {
            gameBoard.repaint();
        }
    }
    
    private void handleMouseReleased(MouseEvent e) {
        if (selectedPiece != null && dragStart != null) {
            int deltaX = e.getX() - dragStart.x;
            int deltaY = e.getY() - dragStart.y;
            
            // Á°ÆÂÆöÁßªÂä®ÊñπÂêë
            Direction moveDirection = null;
            if (Math.abs(deltaX) > Math.abs(deltaY)) {
                if (Math.abs(deltaX) > CELL_SIZE / 3) {
                    moveDirection = deltaX > 0 ? Direction.RIGHT : Direction.LEFT;
                }
            } else {
                if (Math.abs(deltaY) > CELL_SIZE / 3) {
                    moveDirection = deltaY > 0 ? Direction.DOWN : Direction.UP;
                }
            }
            
            if (moveDirection != null && canMovePiece(selectedPiece, moveDirection)) {
                movePiece(selectedPiece, moveDirection);
                moveCount++;
                checkWinCondition();
                updateStatusLabel();
            }
        }
        
        selectedPiece = null;
        dragStart = null;
        gameBoard.repaint();
    }
    
    private GamePiece findPieceAt(int x, int y) {
        for (GamePiece piece : pieces) {
            if (x >= piece.x && x < piece.x + piece.width &&
                y >= piece.y && y < piece.y + piece.height) {
                return piece;
            }
        }
        return null;
    }
    
    private boolean canMovePiece(GamePiece piece, Direction direction) {
        int newX = piece.x + direction.dx;
        int newY = piece.y + direction.dy;
        
        // Ê£ÄÊü•ËæπÁïå
        if (newX < 0 || newY < 0 || 
            newX + piece.width > BOARD_WIDTH || 
            newY + piece.height > BOARD_HEIGHT) {
            return false;
        }
        
        // Ê£ÄÊü•‰∏éÂÖ∂‰ªñÊñπÂùóÁöÑÁ¢∞Êíû
        for (GamePiece other : pieces) {
            if (other == piece) continue;
            
            if (isOverlapping(newX, newY, piece.width, piece.height,
                            other.x, other.y, other.width, other.height)) {
                return false;
            }
        }
        
        return true;
    }
    
    private boolean isOverlapping(int x1, int y1, int w1, int h1,
                                int x2, int y2, int w2, int h2) {
        return !(x1 + w1 <= x2 || x2 + w2 <= x1 || 
                y1 + h1 <= y2 || y2 + h2 <= y1);
    }
    
    private void movePiece(GamePiece piece, Direction direction) {
        piece.x += direction.dx;
        piece.y += direction.dy;
    }
    
    private void checkWinCondition() {
        // ÊâæÂà∞ÊõπÊìç
        GamePiece caocao = pieces.stream()
            .filter(p -> p.type == PieceType.CAOCAO)
            .findFirst()
            .orElse(null);
        
        if (caocao != null && caocao.x == 1 && caocao.y == 3) {
            gameWon = true;
            timer.stop();
            
            JOptionPane.showMessageDialog(this,
                "ÊÅ≠ÂñúÔºÅÂçéÂÆπÈÅìÈÄöÂÖ≥ÊàêÂäüÔºÅ\n" +
                "ÁßªÂä®Ê≠•Êï∞: " + moveCount + "\n" +
                "Áî®Êó∂: " + formatTime(elapsedSeconds),
                "Ê∏∏ÊàèËÉúÂà©", JOptionPane.INFORMATION_MESSAGE);
        }
    }
    
    private void resetGame() {
        timer.stop();
        initializeGame();
        startTimer();
        gameBoard.repaint();
    }
    
    private void switchLayout() {
        timer.stop();
        if (pieces.get(0).x == 1) { // ÂΩìÂâçÊòØÁªèÂÖ∏Â∏ÉÂ±Ä
            createAlternativeLayout();
        } else {
            createClassicLayout();
        }
        moveCount = 0;
        elapsedSeconds = 0;
        gameWon = false;
        startTimer();
        updateStatusLabel();
        gameBoard.repaint();
    }
    
    private void showHint() {
        String hint = "ÊèêÁ§∫Ôºö\n";
        
        if (moveCount < 10) {
            hint += "1. ÂÖàÁßªÂä®Â∞èÂÖµÔºå‰∏∫Â§ßÂùóËÖæÂá∫Á©∫Èó¥\n";
            hint += "2. Âà©Áî®Á©∫‰ΩçËøõË°åÊñπÂùóÁöÑË∞ÉÊç¢\n";
        } else if (moveCount < 30) {
            hint += "1. Â∞ùËØïÂ∞ÜÂÖ≥ÁæΩÁßªÂà∞Âè≥‰æß\n";
            hint += "2. ‰∏∫ÊõπÊìçÂêë‰∏ãÁßªÂä®ÂàõÈÄ†Êù°‰ª∂\n";
        } else {
            hint += "1. ÊõπÊìçÈúÄË¶ÅÁßªÂä®Âà∞Â∫ïÈÉ®‰∏≠Â§Æ\n";
            hint += "2. ÂèØËÉΩÈúÄË¶ÅÂ§öÊ¨°ÈáçÊñ∞ÊéíÂàóÊñπÂùó\n";
        }
        
        hint += "\nÁõÆÊ†áÔºöÂ∞ÜÊõπÊìçÁßªÂä®Âà∞ÂùêÊ†á(1,3)‰ΩçÁΩÆ";
        
        JOptionPane.showMessageDialog(this, hint, "Ê∏∏ÊàèÊèêÁ§∫", JOptionPane.INFORMATION_MESSAGE);
    }
    
    private void updateStatusLabel() {
        String status = String.format(
            "<html><center>%s%d<br>%s%s<br>%s</center></html>",
            Texts.MOVES_LABEL,
            moveCount,
            Texts.TIME_LABEL,
            formatTime(elapsedSeconds),
            gameWon ? "Â∑≤ÈÄöÂÖ≥!" : "Ê∏∏Êàè‰∏≠"
        );
        statusLabel.setText(status);
    }
    
    private String formatTime(int seconds) {
        int minutes = seconds / 60;
        int secs = seconds % 60;
        return String.format("%02d:%02d", minutes, secs);
    }
    
    // Ê∏∏ÊàèÈù¢ÊùøÁ±ª
    class GameBoard extends JPanel {
        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            Graphics2D g2d = (Graphics2D) g;
            g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
            
            // ÁªòÂà∂ÁΩëÊ†º
            drawGrid(g2d);
            
            // ÁªòÂà∂Âá∫Âè£
            drawExit(g2d);
            
            // ÁªòÂà∂ÊñπÂùó
            for (GamePiece piece : pieces) {
                drawPiece(g2d, piece);
            }
            
            // ÁªòÂà∂ÈÄâ‰∏≠ÊïàÊûú
            if (selectedPiece != null) {
                drawSelection(g2d, selectedPiece);
            }
        }
        
        private void drawGrid(Graphics2D g2d) {
            g2d.setColor(new Color(101, 67, 33));
            g2d.setStroke(new BasicStroke(2));
            
            for (int x = 0; x <= BOARD_WIDTH; x++) {
                g2d.drawLine(x * CELL_SIZE, 0, x * CELL_SIZE, BOARD_PIXEL_HEIGHT);
            }
            for (int y = 0; y <= BOARD_HEIGHT; y++) {
                g2d.drawLine(0, y * CELL_SIZE, BOARD_PIXEL_WIDTH, y * CELL_SIZE);
            }
        }
        
        private void drawExit(Graphics2D g2d) {
            // ÁªòÂà∂Âá∫Âè£ÔºàÂ∫ïÈÉ®‰∏≠Â§ÆÔºâ
            g2d.setColor(new Color(255, 215, 0, 100)); // ÂçäÈÄèÊòéÈáëËâ≤
            g2d.fillRect(CELL_SIZE, (BOARD_HEIGHT - 1) * CELL_SIZE, 
                        2 * CELL_SIZE, CELL_SIZE);
            
            g2d.setColor(Color.YELLOW);
            g2d.setStroke(new BasicStroke(3));
            g2d.drawRect(CELL_SIZE, (BOARD_HEIGHT - 1) * CELL_SIZE, 
                        2 * CELL_SIZE, CELL_SIZE);
            
            // ÁªòÂà∂"Âá∫Âè£"ÊñáÂ≠ó
            g2d.setColor(Color.BLACK);
            g2d.setFont(new Font("ÂæÆËΩØÈõÖÈªë", Font.BOLD, 16));
            FontMetrics fm = g2d.getFontMetrics();
            String exitText = "Âá∫Âè£";
            int textX = CELL_SIZE + (2 * CELL_SIZE - fm.stringWidth(exitText)) / 2;
            int textY = (BOARD_HEIGHT - 1) * CELL_SIZE + (CELL_SIZE + fm.getAscent()) / 2;
            g2d.drawString(exitText, textX, textY);
        }
        
        private void drawPiece(Graphics2D g2d, GamePiece piece) {
            int x = piece.x * CELL_SIZE + 2;
            int y = piece.y * CELL_SIZE + 2;
            int width = piece.width * CELL_SIZE - 4;
            int height = piece.height * CELL_SIZE - 4;
            
            // ÁªòÂà∂ÊñπÂùó‰∏ª‰Ωì
            g2d.setColor(piece.color);
            g2d.fillRoundRect(x, y, width, height, 10, 10);
            
            // ÁªòÂà∂ËæπÊ°Ü
            g2d.setColor(piece.color.darker());
            g2d.setStroke(new BasicStroke(2));
            g2d.drawRoundRect(x, y, width, height, 10, 10);
            
            // ÁªòÂà∂ÂêçÂ≠ó
            g2d.setColor(Color.BLACK);
            g2d.setFont(new Font("ÂæÆËΩØÈõÖÈªë", Font.BOLD, 
                piece.width == 2 && piece.height == 2 ? 16 : 12));
            FontMetrics fm = g2d.getFontMetrics();
            
            int textX = x + (width - fm.stringWidth(piece.name)) / 2;
            int textY = y + (height + fm.getAscent()) / 2;
            g2d.drawString(piece.name, textX, textY);
        }
        
        private void drawSelection(Graphics2D g2d, GamePiece piece) {
            int x = piece.x * CELL_SIZE;
            int y = piece.y * CELL_SIZE;
            int width = piece.width * CELL_SIZE;
            int height = piece.height * CELL_SIZE;
            
            g2d.setColor(Color.WHITE);
            g2d.setStroke(new BasicStroke(3, BasicStroke.CAP_ROUND, BasicStroke.JOIN_ROUND, 
                                        0, new float[]{10, 5}, 0));
            g2d.drawRect(x, y, width, height);
        }
    }
    
    // ÊñπÂêëÊûö‰∏æ
    enum Direction {
        UP(0, -1), DOWN(0, 1), LEFT(-1, 0), RIGHT(1, 0);
        
        final int dx, dy;
        
        Direction(int dx, int dy) {
            this.dx = dx;
            this.dy = dy;
        }
    }
    
    // ÊñπÂùóÁ±ªÂûãÊûö‰∏æ
    enum PieceType {
        CAOCAO, GUANYU, ZHANGFEI, ZHAOYUN, MACHAO, HUANGZHONG, SOLDIER
    }
    
    // Ê∏∏ÊàèÊñπÂùóÁ±ª
    static class GamePiece {
        String name;
        int x, y;
        int width, height;
        Color color;
        PieceType type;
        
        public GamePiece(String name, int x, int y, int width, int height,
                        Color color, PieceType type) {
            this.name = name;
            this.x = x;
            this.y = y;
            this.width = width;
            this.height = height;
            this.color = color;
            this.type = type;
        }
    }

    private void setupKeyboardShortcuts() {
        // Ê∑ªÂä†ÈîÆÁõòÂø´Êç∑ÈîÆÊîØÊåÅ
        this.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent ev) {
                int keyCode = ev.getKeyCode();

                switch (keyCode) {
                    case KeyEvent.VK_N:
                        // Ctrl+N Êñ∞Ê∏∏Êàè
                        if (ev.isControlDown()) {
                            resetGame();
                        }
                        break;
                    case KeyEvent.VK_R:
                        // Ctrl+R ÈáçÊñ∞ÂºÄÂßã
                        if (ev.isControlDown()) {
                            resetGame();
                        }
                        break;
                    case KeyEvent.VK_H:
                        // Ctrl+H ÊòæÁ§∫Â∏ÆÂä©
                        if (ev.isControlDown()) {
                            showHelp();
                        }
                        break;
                    case KeyEvent.VK_F1:
                        // F1ÈîÆÊòæÁ§∫Â∏ÆÂä©
                        showHelp();
                        break;
                    default:
                        return;
                }
            }
        });

        // Á°Æ‰øùÁ™óÂè£ÂèØ‰ª•Ëé∑ÂæóÁÑ¶ÁÇπ
        this.setFocusable(true);
        this.requestFocusInWindow();
    }

    private void showHelp() {
        JOptionPane.showMessageDialog(this, Texts.HELP_MESSAGE, "Â∏ÆÂä©", JOptionPane.INFORMATION_MESSAGE);
    }
}
