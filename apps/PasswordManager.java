import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.io.*;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.security.MessageDigest;
import java.util.ArrayList;
import java.util.Base64;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;

// ÊñáÊú¨ÁÆ°ÁêÜÈùôÊÄÅÂÜÖÈÉ®Á±ª
static class Texts {
    // Á™óÂè£Ê†áÈ¢ò
    static final String WINDOW_TITLE = "üîí ÂØÜÁ†ÅÁÆ°ÁêÜÂô®";

    // ‰∏ªÁïåÈù¢Ê†áÈ¢ò
    static final String MAIN_TITLE = "üîí ÂÆâÂÖ®ÂØÜÁ†ÅÁÆ°ÁêÜÂô®";

    // ÊåâÈíÆÊñáÊú¨
    static final String ADD_BUTTON = "Ê∑ªÂä†";
    static final String EDIT_BUTTON = "ÁºñËæë";
    static final String DELETE_BUTTON = "Âà†Èô§";
    static final String SHOW_BUTTON = "ÊòæÁ§∫ÂØÜÁ†Å";
    static final String GENERATE_BUTTON = "ÁîüÊàêÂØÜÁ†Å";
    static final String EXPORT_BUTTON = "ÂØºÂá∫";
    static final String CHANGE_PASSWORD_BUTTON = "Êõ¥Êîπ‰∏ªÂØÜÁ†Å";
    static final String CONFIRM_BUTTON = "Á°ÆËÆ§";
    static final String CANCEL_BUTTON = "ÂèñÊ∂à";
    static final String GENERATE_PASSWORD_BUTTON = "ÁîüÊàê";

    // Èù¢ÊùøÊ†áÈ¢ò
    static final String ADD_EDIT_PANEL_TITLE = "Ê∑ªÂä†/ÁºñËæëÂØÜÁ†Å";
    static final String PASSWORD_TABLE_TITLE = "‰øùÂ≠òÁöÑÂØÜÁ†Å";
    static final String GENERATE_DIALOG_TITLE = "ÁîüÊàêÂØÜÁ†Å";

    // Ê†áÁ≠æÊñáÊú¨
    static final String SITE_LABEL = "ÁΩëÁ´ô:";
    static final String USERNAME_LABEL = "Áî®Êà∑Âêç:";
    static final String PASSWORD_LABEL = "ÂØÜÁ†Å:";
    static final String LENGTH_LABEL = "ÈïøÂ∫¶:";
    static final String UPPERCASE_LABEL = "Â§ßÂÜô";
    static final String LOWERCASE_LABEL = "Â∞èÂÜô";
    static final String NUMBERS_LABEL = "Êï∞Â≠ó";
    static final String SYMBOLS_LABEL = "Á¨¶Âè∑";

    // Áä∂ÊÄÅÊ∂àÊÅØ
    static final String STATUS_READY = "Â∞±Áª™";
    static final String STATUS_PASSWORD_ADDED = "ÂØÜÁ†ÅÂ∑≤Ê∑ªÂä†";
    static final String STATUS_PASSWORD_EDITED = "ÂØÜÁ†ÅÂ∑≤ÁºñËæë";
    static final String STATUS_PASSWORD_DELETED = "ÂØÜÁ†ÅÂ∑≤Âà†Èô§";
    static final String STATUS_PASSWORD_GENERATED = "ÂØÜÁ†ÅÂ∑≤ÁîüÊàê";
    static final String STATUS_PASSWORD_EXPORTED = "ÂØÜÁ†ÅÂ∑≤ÂØºÂá∫";
    static final String STATUS_MASTER_PASSWORD_CHANGED = "‰∏ªÂØÜÁ†ÅÂ∑≤Êõ¥Êîπ";

    // ÈîôËØØÊ∂àÊÅØ
    static final String ERROR_EMPTY_SITE = "ËØ∑ËæìÂÖ•ÁΩëÁ´ôÂêçÁß∞ÔºÅ";
    static final String ERROR_EMPTY_USERNAME = "ËØ∑ËæìÂÖ•Áî®Êà∑ÂêçÔºÅ";
    static final String ERROR_EMPTY_PASSWORD = "ËØ∑ËæìÂÖ•ÂØÜÁ†ÅÔºÅ";
    static final String ERROR_INVALID_PASSWORD = "ÂØÜÁ†Å‰∏çËÉΩ‰∏∫Á©∫ÔºÅ";
    static final String ERROR_PASSWORD_MISMATCH = "‰∏§Ê¨°ÂØÜÁ†Å‰∏ç‰∏ÄËá¥ÔºÅ";
    static final String ERROR_WRONG_PASSWORD = "ÂØÜÁ†ÅÈîôËØØÔºÅ";
    static final String ERROR_NO_CHAR_TYPE = "ËØ∑Ëá≥Â∞ëÈÄâÊã©‰∏ÄÁßçÂ≠óÁ¨¶Á±ªÂûãÔºÅ";
    static final String ERROR_EXPORT_FAILED = "ÂØºÂá∫Â§±Ë¥•: ";

    // Á°ÆËÆ§ÂØπËØùÊ°Ü
    static final String CONFIRM_DELETE_TITLE = "Á°ÆËÆ§Âà†Èô§";
    static final String CONFIRM_DELETE_MESSAGE = "Á°ÆÂÆöË¶ÅÂà†Èô§Ëøô‰∏™ÂØÜÁ†ÅÂêóÔºü";
    static final String CONFIRM_CHANGE_PASSWORD_TITLE = "Á°ÆËÆ§Êõ¥Êîπ‰∏ªÂØÜÁ†Å";

    // ËæìÂÖ•ÂØπËØùÊ°Ü
    static final String AUTH_DIALOG_TITLE = "Ë∫´‰ªΩÈ™åËØÅ";
    static final String AUTH_DIALOG_MESSAGE = "ËØ∑ËæìÂÖ•‰∏ªÂØÜÁ†Å:";
    static final String SET_MASTER_PASSWORD_TITLE = "ËÆæÁΩÆ‰∏ªÂØÜÁ†Å";
    static final String SET_MASTER_PASSWORD_MESSAGE = "Á°ÆËÆ§‰∏ªÂØÜÁ†Å:";
    static final String ENTER_CURRENT_PASSWORD_TITLE = "ËØ∑ËæìÂÖ•ÂΩìÂâç‰∏ªÂØÜÁ†Å:";
    static final String ENTER_NEW_PASSWORD_TITLE = "ËØ∑ËæìÂÖ•Êñ∞‰∏ªÂØÜÁ†Å:";
    static final String CONFIRM_NEW_PASSWORD_TITLE = "Á°ÆËÆ§Êñ∞‰∏ªÂØÜÁ†Å:";

    // Êñá‰ª∂ÂØπËØùÊ°Ü
    static final String EXPORT_FILE_NAME = "passwords_export.txt";
    static final String EXPORT_DIALOG_TITLE = "ÂØÜÁ†ÅÂØºÂá∫ - ";
    static final String EXPORT_SUCCESS_MESSAGE = "ÂØºÂá∫ÊàêÂäüÔºÅ";

    // Ë°®Ê†ºÂàóÂêç
    static final String TABLE_COLUMN_SITE = "ÁΩëÁ´ô";
    static final String TABLE_COLUMN_USERNAME = "Áî®Êà∑Âêç";
    static final String TABLE_COLUMN_PASSWORD = "ÂØÜÁ†Å";
    static final String HIDDEN_PASSWORD_DISPLAY = "‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢";

    // Â∏ÆÂä©‰ø°ÊÅØ
    static final String HELP_MESSAGE = """
        ÂØÜÁ†ÅÁÆ°ÁêÜÂô®‰ΩøÁî®ËØ¥ÊòéÔºö

        ‚Ä¢ È¶ñÊ¨°‰ΩøÁî®ÈúÄË¶ÅËÆæÁΩÆ‰∏ªÂØÜÁ†ÅÔºåÁî®‰∫éÂä†ÂØÜ‰øùÊä§ÊâÄÊúâÂ≠òÂÇ®ÁöÑÂØÜÁ†Å
        ‚Ä¢ Ê∑ªÂä†ÂØÜÁ†ÅÔºöËæìÂÖ•ÁΩëÁ´ô„ÄÅÁî®Êà∑ÂêçÂíåÂØÜÁ†ÅÔºåÁÇπÂáª"Ê∑ªÂä†"ÊåâÈíÆ
        ‚Ä¢ ÁºñËæëÂØÜÁ†ÅÔºöÂú®Ë°®Ê†º‰∏≠ÈÄâÊã©ÂØÜÁ†ÅÔºå‰øÆÊîπ‰ø°ÊÅØÂêéÁÇπÂáª"ÁºñËæë"ÊåâÈíÆ
        ‚Ä¢ Âà†Èô§ÂØÜÁ†ÅÔºöÂú®Ë°®Ê†º‰∏≠ÈÄâÊã©ÂØÜÁ†ÅÔºåÁÇπÂáª"Âà†Èô§"ÊåâÈíÆ
        ‚Ä¢ ÊòæÁ§∫ÂØÜÁ†ÅÔºöÈÄâÊã©ÂØÜÁ†ÅÂêéÁÇπÂáª"ÊòæÁ§∫ÂØÜÁ†Å"ÊåâÈíÆÊü•ÁúãÊòéÊñáÂØÜÁ†Å
        ‚Ä¢ ÁîüÊàêÂØÜÁ†ÅÔºöÁÇπÂáª"ÁîüÊàêÂØÜÁ†Å"ÊåâÈíÆ‰ΩøÁî®ÂÜÖÁΩÆÂØÜÁ†ÅÁîüÊàêÂô®
        ‚Ä¢ ÂØºÂá∫ÂØÜÁ†ÅÔºöÁÇπÂáª"ÂØºÂá∫"ÊåâÈíÆÂ∞ÜÊâÄÊúâÂØÜÁ†ÅÂØºÂá∫Âà∞ÊñáÊú¨Êñá‰ª∂
        ‚Ä¢ Êõ¥Êîπ‰∏ªÂØÜÁ†ÅÔºöÁÇπÂáª"Êõ¥Êîπ‰∏ªÂØÜÁ†Å"ÊåâÈíÆ‰øÆÊîπ‰∏ªÂØÜÁ†Å

        ÂÆâÂÖ®ÊèêÁ§∫Ôºö
        ‚Ä¢ ‰∏ªÂØÜÁ†ÅÊòØËÆøÈóÆÊâÄÊúâÂ≠òÂÇ®ÂØÜÁ†ÅÁöÑÂÖ≥ÈîÆÔºåËØ∑Â¶•ÂñÑ‰øùÁÆ°
        ‚Ä¢ Âª∫ËÆÆÂÆöÊúüÊõ¥Êç¢‰∏ªÂØÜÁ†Å
        ‚Ä¢ ‰∏çË¶ÅÂú®ÂÖ¨ÂÖ±ËÆ°ÁÆóÊú∫‰∏ä‰ΩøÁî®ÂØÜÁ†ÅÁÆ°ÁêÜÂô®
        ‚Ä¢ ÂØºÂá∫ÂäüËÉΩ‰ºöÁîüÊàêÊòéÊñáÊñá‰ª∂ÔºåËØ∑Â¶•ÂñÑ‰øùÁÆ°ÂØºÂá∫Êñá‰ª∂

        Âø´Êç∑ÈîÆÔºö
        Ctrl+A - Ê∑ªÂä†ÂØÜÁ†Å
        Ctrl+E - ÁºñËæëÂØÜÁ†Å
        Ctrl+D - Âà†Èô§ÂØÜÁ†Å
        Ctrl+S - ÊòæÁ§∫ÂØÜÁ†Å
        Ctrl+G - ÁîüÊàêÂØÜÁ†Å
        Ctrl+X - ÂØºÂá∫ÂØÜÁ†Å
        Ctrl+P - Êõ¥Êîπ‰∏ªÂØÜÁ†Å
        F1 - ÊòæÁ§∫Â∏ÆÂä©
        """;
}

void main(String[] args) {
    SwingUtilities.invokeLater(() -> {
        new PasswordManager().setVisible(true);
    });
}

static class PasswordManager extends JFrame {
    private final String DATA_FILE = "passwords.dat";
    private String masterPassword = "";
    private boolean isAuthenticated = false;
    
    private DefaultTableModel tableModel;
    private JTable passwordTable;
    private JTextField siteField, usernameField;
    private JPasswordField passwordField;
    private JButton addButton, editButton, deleteButton, showButton;
    
    public PasswordManager() {
        setTitle(Texts.WINDOW_TITLE);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(700, 500);

        if (authenticateUser()) {
            initializeUI();
            loadPasswords();
            setupKeyboardShortcuts();
        } else {
            System.exit(0);
        }

        setLocationRelativeTo(null);
    }
    
    private boolean authenticateUser() {
        while (true) {
            var password = JOptionPane.showInputDialog(this,
                Texts.AUTH_DIALOG_MESSAGE, Texts.AUTH_DIALOG_TITLE, JOptionPane.QUESTION_MESSAGE);
            
            if (password == null) {
                return false;
            }
            
            if (password.isEmpty()) {
                JOptionPane.showMessageDialog(this, Texts.ERROR_INVALID_PASSWORD);
                continue;
            }
            
            // È¶ñÊ¨°‰ΩøÁî®ÊàñÈ™åËØÅÂØÜÁ†Å
            if (!Files.exists(Paths.get(DATA_FILE))) {
                var confirm = JOptionPane.showInputDialog(this,
                    Texts.SET_MASTER_PASSWORD_MESSAGE, Texts.SET_MASTER_PASSWORD_TITLE, JOptionPane.QUESTION_MESSAGE);
                
                if (confirm != null && confirm.equals(password)) {
                    masterPassword = password;
                    isAuthenticated = true;
                    return true;
                } else {
                    JOptionPane.showMessageDialog(this, Texts.ERROR_PASSWORD_MISMATCH);
                }
            } else {
                masterPassword = password;
                if (verifyMasterPassword()) {
                    isAuthenticated = true;
                    return true;
                } else {
                    JOptionPane.showMessageDialog(this, Texts.ERROR_WRONG_PASSWORD);
                }
            }
        }
    }
    
    private void initializeUI() {
        setLayout(new BorderLayout());
        
        // È°∂ÈÉ®Èù¢Êùø
        var topPanel = new JPanel(new GridBagLayout());
        topPanel.setBorder(BorderFactory.createTitledBorder(Texts.ADD_EDIT_PANEL_TITLE));
        var gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 5, 5, 5);

        gbc.gridx = 0; gbc.gridy = 0;
        topPanel.add(new JLabel(Texts.SITE_LABEL), gbc);
        gbc.gridx = 1;
        siteField = new JTextField(15);
        topPanel.add(siteField, gbc);

        gbc.gridx = 0; gbc.gridy = 1;
        topPanel.add(new JLabel(Texts.USERNAME_LABEL), gbc);
        gbc.gridx = 1;
        usernameField = new JTextField(15);
        topPanel.add(usernameField, gbc);

        gbc.gridx = 0; gbc.gridy = 2;
        topPanel.add(new JLabel(Texts.PASSWORD_LABEL), gbc);
        gbc.gridx = 1;
        passwordField = new JPasswordField(15);
        topPanel.add(passwordField, gbc);
        
        // ÊåâÈíÆÈù¢Êùø
        var buttonPanel = new JPanel(new FlowLayout());
        addButton = new JButton(Texts.ADD_BUTTON);
        editButton = new JButton(Texts.EDIT_BUTTON);
        deleteButton = new JButton(Texts.DELETE_BUTTON);
        showButton = new JButton(Texts.SHOW_BUTTON);

        var generateButton = new JButton(Texts.GENERATE_BUTTON);
        var exportButton = new JButton(Texts.EXPORT_BUTTON);
        var changePasswordButton = new JButton(Texts.CHANGE_PASSWORD_BUTTON);
        
        addButton.addActionListener(this::addPassword);
        editButton.addActionListener(this::editPassword);
        deleteButton.addActionListener(this::deletePassword);
        showButton.addActionListener(this::showPassword);
        generateButton.addActionListener(this::generatePassword);
        exportButton.addActionListener(this::exportPasswords);
        changePasswordButton.addActionListener(this::changeMasterPassword);
        
        buttonPanel.add(addButton);
        buttonPanel.add(editButton);
        buttonPanel.add(deleteButton);
        buttonPanel.add(showButton);
        buttonPanel.add(generateButton);
        buttonPanel.add(exportButton);
        buttonPanel.add(changePasswordButton);
        
        // Ë°®Ê†º
        String[] columns = {Texts.TABLE_COLUMN_SITE, Texts.TABLE_COLUMN_USERNAME, Texts.TABLE_COLUMN_PASSWORD};
        tableModel = new DefaultTableModel(columns, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        
        passwordTable = new JTable(tableModel);
        passwordTable.getSelectionModel().addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting()) {
                updateButtonStates();
                loadSelectedRow();
            }
        });
        
        // ÈöêËóèÂØÜÁ†ÅÂàó
        passwordTable.getColumnModel().getColumn(2).setCellRenderer(
            (table, value, isSelected, hasFocus, row, column) -> {
                var label = new JLabel(Texts.HIDDEN_PASSWORD_DISPLAY);
                if (isSelected) {
                    label.setBackground(table.getSelectionBackground());
                    label.setOpaque(true);
                }
                return label;
            }
        );

        var scrollPane = new JScrollPane(passwordTable);
        scrollPane.setBorder(BorderFactory.createTitledBorder(Texts.PASSWORD_TABLE_TITLE));
        
        add(topPanel, BorderLayout.NORTH);
        add(buttonPanel, BorderLayout.CENTER);
        add(scrollPane, BorderLayout.SOUTH);
        
        updateButtonStates();
    }
    
    private void updateButtonStates() {
        boolean hasSelection = passwordTable.getSelectedRow() != -1;
        editButton.setEnabled(hasSelection);
        deleteButton.setEnabled(hasSelection);
        showButton.setEnabled(hasSelection);
    }
    
    private void loadSelectedRow() {
        int row = passwordTable.getSelectedRow();
        if (row != -1) {
            siteField.setText((String) tableModel.getValueAt(row, 0));
            usernameField.setText((String) tableModel.getValueAt(row, 1));
            passwordField.setText((String) tableModel.getValueAt(row, 2));
        }
    }
    
    private void addPassword(ActionEvent e) {
        if (validateInput()) {
            tableModel.addRow(new Object[]{
                siteField.getText(),
                usernameField.getText(),
                new String(passwordField.getPassword())
            });
            clearFields();
            savePasswords();
        }
    }
    
    private void editPassword(ActionEvent e) {
        int row = passwordTable.getSelectedRow();
        if (row != -1 && validateInput()) {
            tableModel.setValueAt(siteField.getText(), row, 0);
            tableModel.setValueAt(usernameField.getText(), row, 1);
            tableModel.setValueAt(new String(passwordField.getPassword()), row, 2);
            clearFields();
            savePasswords();
        }
    }
    
    private void deletePassword(ActionEvent e) {
        int row = passwordTable.getSelectedRow();
        if (row != -1) {
            int result = JOptionPane.showConfirmDialog(this,
                Texts.CONFIRM_DELETE_MESSAGE, Texts.CONFIRM_DELETE_TITLE, JOptionPane.YES_NO_OPTION);
            
            if (result == JOptionPane.YES_OPTION) {
                tableModel.removeRow(row);
                clearFields();
                savePasswords();
            }
        }
    }
    
    private void showPassword(ActionEvent e) {
        int row = passwordTable.getSelectedRow();
        if (row != -1) {
            String password = (String) tableModel.getValueAt(row, 2);
            JOptionPane.showMessageDialog(this,
                Texts.PASSWORD_LABEL + " " + password, Texts.SHOW_BUTTON, JOptionPane.INFORMATION_MESSAGE);
        }
    }
    
    private void generatePassword(ActionEvent e) {
        var dialog = new PasswordGeneratorDialog(this);
        dialog.setVisible(true);
        
        if (dialog.getGeneratedPassword() != null) {
            passwordField.setText(dialog.getGeneratedPassword());
        }
    }
    
    private void exportPasswords(ActionEvent e) {
        var fileChooser = new JFileChooser();
        fileChooser.setSelectedFile(new File(Texts.EXPORT_FILE_NAME));

        if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            try (var writer = new PrintWriter(fileChooser.getSelectedFile())) {
                writer.println(Texts.EXPORT_DIALOG_TITLE + new java.util.Date());
                writer.println("=" .repeat(50));

                for (int i = 0; i < tableModel.getRowCount(); i++) {
                    writer.printf(Texts.TABLE_COLUMN_SITE + ": %s%n", tableModel.getValueAt(i, 0));
                    writer.printf(Texts.TABLE_COLUMN_USERNAME + ": %s%n", tableModel.getValueAt(i, 1));
                    writer.printf(Texts.TABLE_COLUMN_PASSWORD + ": %s%n", tableModel.getValueAt(i, 2));
                    writer.println("-".repeat(30));
                }

                JOptionPane.showMessageDialog(this, Texts.EXPORT_SUCCESS_MESSAGE);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, Texts.ERROR_EXPORT_FAILED + ex.getMessage());
            }
        }
    }
    
    private void changeMasterPassword(ActionEvent e) {
        var oldPassword = JOptionPane.showInputDialog(this, Texts.ENTER_CURRENT_PASSWORD_TITLE);
        if (oldPassword != null && oldPassword.equals(masterPassword)) {
            var newPassword = JOptionPane.showInputDialog(this, Texts.ENTER_NEW_PASSWORD_TITLE);
            if (newPassword != null && !newPassword.isEmpty()) {
                var confirm = JOptionPane.showInputDialog(this, Texts.CONFIRM_NEW_PASSWORD_TITLE);
                if (confirm != null && confirm.equals(newPassword)) {
                    masterPassword = newPassword;
                    savePasswords();
                    JOptionPane.showMessageDialog(this, Texts.STATUS_MASTER_PASSWORD_CHANGED);
                } else {
                    JOptionPane.showMessageDialog(this, Texts.ERROR_PASSWORD_MISMATCH);
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, Texts.ERROR_WRONG_PASSWORD);
        }
    }
    
    private boolean validateInput() {
        if (siteField.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, Texts.ERROR_EMPTY_SITE);
            return false;
        }
        if (usernameField.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, Texts.ERROR_EMPTY_USERNAME);
            return false;
        }
        if (passwordField.getPassword().length == 0) {
            JOptionPane.showMessageDialog(this, Texts.ERROR_EMPTY_PASSWORD);
            return false;
        }
        return true;
    }
    
    private void setupKeyboardShortcuts() {
        // Ê∑ªÂä†ÈîÆÁõòÂø´Êç∑ÈîÆÊîØÊåÅ
        this.addKeyListener(new java.awt.event.KeyAdapter() {
            @Override
            public void keyPressed(java.awt.event.KeyEvent ev) {
                int keyCode = ev.getKeyCode();

                switch (keyCode) {
                    case KeyEvent.VK_A:
                        // AÈîÆÊ∑ªÂä†ÂØÜÁ†Å
                        if (ev.isControlDown()) {
                            addPassword(null);
                        }
                        break;
                    case KeyEvent.VK_E:
                        // EÈîÆÁºñËæëÂØÜÁ†Å
                        if (ev.isControlDown()) {
                            editPassword(null);
                        }
                        break;
                    case KeyEvent.VK_D:
                        // DÈîÆÂà†Èô§ÂØÜÁ†Å
                        if (ev.isControlDown()) {
                            deletePassword(null);
                        }
                        break;
                    case KeyEvent.VK_S:
                        // SÈîÆÊòæÁ§∫ÂØÜÁ†Å
                        if (ev.isControlDown()) {
                            showPassword(null);
                        }
                        break;
                    case KeyEvent.VK_G:
                        // GÈîÆÁîüÊàêÂØÜÁ†Å
                        if (ev.isControlDown()) {
                            generatePassword(null);
                        }
                        break;
                    case KeyEvent.VK_X:
                        // XÈîÆÂØºÂá∫ÂØÜÁ†Å
                        if (ev.isControlDown()) {
                            exportPasswords(null);
                        }
                        break;
                    case KeyEvent.VK_P:
                        // PÈîÆÊõ¥Êîπ‰∏ªÂØÜÁ†Å
                        if (ev.isControlDown()) {
                            changeMasterPassword(null);
                        }
                        break;
                    case KeyEvent.VK_F1:
                        // F1ÈîÆÊòæÁ§∫Â∏ÆÂä©
                        showHelp();
                        break;
                    default:
                        return;
                }
            }
        });

        // Á°Æ‰øùÁ™óÂè£ÂèØ‰ª•Ëé∑ÂæóÁÑ¶ÁÇπ
        this.setFocusable(true);
        this.requestFocusInWindow();
    }

    private void showHelp() {
        JOptionPane.showMessageDialog(this, Texts.HELP_MESSAGE, "Â∏ÆÂä©", JOptionPane.INFORMATION_MESSAGE);
    }

    private void clearFields() {
        siteField.setText("");
        usernameField.setText("");
        passwordField.setText("");
    }
    
    private void savePasswords() {
        try {
            var data = new ArrayList<String>();
            data.add(hashPassword(masterPassword)); // ‰øùÂ≠ò‰∏ªÂØÜÁ†ÅÂìàÂ∏å
            
            for (int i = 0; i < tableModel.getRowCount(); i++) {
                var site = (String) tableModel.getValueAt(i, 0);
                var username = (String) tableModel.getValueAt(i, 1);
                var password = (String) tableModel.getValueAt(i, 2);
                
                data.add(encrypt(site + "|" + username + "|" + password));
            }
            
            Files.write(Paths.get(DATA_FILE), data);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "‰øùÂ≠òÂ§±Ë¥•: " + e.getMessage());
        }
    }
    
    private void loadPasswords() {
        try {
            if (!Files.exists(Paths.get(DATA_FILE))) {
                return;
            }
            
            var lines = Files.readAllLines(Paths.get(DATA_FILE));
            if (lines.isEmpty()) return;
            
            // Ë∑≥ËøáÁ¨¨‰∏ÄË°åÔºà‰∏ªÂØÜÁ†ÅÂìàÂ∏åÔºâ
            for (int i = 1; i < lines.size(); i++) {
                var decrypted = decrypt(lines.get(i));
                var parts = decrypted.split("\\|");
                
                if (parts.length == 3) {
                    tableModel.addRow(new Object[]{parts[0], parts[1], parts[2]});
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Âä†ËΩΩÂ§±Ë¥•: " + e.getMessage());
        }
    }
    
    private boolean verifyMasterPassword() {
        try {
            if (!Files.exists(Paths.get(DATA_FILE))) {
                return true;
            }
            
            var lines = Files.readAllLines(Paths.get(DATA_FILE));
            if (lines.isEmpty()) return true;
            
            return hashPassword(masterPassword).equals(lines.get(0));
        } catch (Exception e) {
            return false;
        }
    }
    
    private String hashPassword(String password) {
        try {
            var digest = MessageDigest.getInstance("SHA-256");
            var hash = digest.digest(password.getBytes());
            return Base64.getEncoder().encodeToString(hash);
        } catch (Exception e) {
            return password;
        }
    }
    
    private String encrypt(String data) {
        try {
            var key = new SecretKeySpec(masterPassword.getBytes(), 0, 16, "AES");
            var cipher = Cipher.getInstance("AES");
            cipher.init(Cipher.ENCRYPT_MODE, key);
            return Base64.getEncoder().encodeToString(cipher.doFinal(data.getBytes()));
        } catch (Exception e) {
            return data;
        }
    }
    
    private String decrypt(String encryptedData) {
        try {
            var key = new SecretKeySpec(masterPassword.getBytes(), 0, 16, "AES");
            var cipher = Cipher.getInstance("AES");
            cipher.init(Cipher.DECRYPT_MODE, key);
            return new String(cipher.doFinal(Base64.getDecoder().decode(encryptedData)));
        } catch (Exception e) {
            return encryptedData;
        }
    }
    
    private static class PasswordGeneratorDialog extends JDialog {
        private String generatedPassword;
        private JSpinner lengthSpinner;
        private JCheckBox uppercaseBox, lowercaseBox, numbersBox, symbolsBox;
        
        public PasswordGeneratorDialog(JFrame parent) {
            super(parent, Texts.GENERATE_DIALOG_TITLE, true);
            setSize(300, 250);
            setLocationRelativeTo(parent);
            
            initializeUI();
        }
        
        private void initializeUI() {
            setLayout(new BorderLayout());
            
            var panel = new JPanel(new GridBagLayout());
            var gbc = new GridBagConstraints();
            gbc.insets = new Insets(5, 5, 5, 5);
            
            gbc.gridx = 0; gbc.gridy = 0;
            panel.add(new JLabel(Texts.LENGTH_LABEL), gbc);
            gbc.gridx = 1;
            lengthSpinner = new JSpinner(new SpinnerNumberModel(12, 4, 50, 1));
            panel.add(lengthSpinner, gbc);
            
            gbc.gridx = 0; gbc.gridy = 1; gbc.gridwidth = 2;
            uppercaseBox = new JCheckBox(Texts.UPPERCASE_LABEL, true);
            panel.add(uppercaseBox, gbc);

            gbc.gridy = 2;
            lowercaseBox = new JCheckBox(Texts.LOWERCASE_LABEL, true);
            panel.add(lowercaseBox, gbc);

            gbc.gridy = 3;
            numbersBox = new JCheckBox(Texts.NUMBERS_LABEL, true);
            panel.add(numbersBox, gbc);

            gbc.gridy = 4;
            symbolsBox = new JCheckBox(Texts.SYMBOLS_LABEL, false);
            panel.add(symbolsBox, gbc);
            
            var buttonPanel = new JPanel();
            var generateBtn = new JButton(Texts.GENERATE_PASSWORD_BUTTON);
            var cancelBtn = new JButton(Texts.CANCEL_BUTTON);
            
            generateBtn.addActionListener(e -> {
                generatePassword();
                dispose();
            });
            
            cancelBtn.addActionListener(e -> dispose());
            
            buttonPanel.add(generateBtn);
            buttonPanel.add(cancelBtn);
            
            add(panel, BorderLayout.CENTER);
            add(buttonPanel, BorderLayout.SOUTH);
        }
        
        private void generatePassword() {
            var chars = new StringBuilder();
            if (uppercaseBox.isSelected()) chars.append("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
            if (lowercaseBox.isSelected()) chars.append("abcdefghijklmnopqrstuvwxyz");
            if (numbersBox.isSelected()) chars.append("0123456789");
            if (symbolsBox.isSelected()) chars.append("!@#$%^&*()_+-=[]{}|;:,.<>?");
            
            if (chars.length() == 0) {
                JOptionPane.showMessageDialog(this, Texts.ERROR_NO_CHAR_TYPE);
                return;
            }
            
            var random = new java.util.Random();
            var password = new StringBuilder();
            int length = (Integer) lengthSpinner.getValue();
            
            for (int i = 0; i < length; i++) {
                password.append(chars.charAt(random.nextInt(chars.length())));
            }
            
            generatedPassword = password.toString();
        }
        
        public String getGeneratedPassword() {
            return generatedPassword;
        }
    }
}
