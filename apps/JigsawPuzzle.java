import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import javax.imageio.ImageIO;

// ÊñáÊú¨ÁÆ°ÁêÜÈùôÊÄÅÂÜÖÈÉ®Á±ª
static class Texts {
    // Á™óÂè£Ê†áÈ¢ò
    static final String WINDOW_TITLE = "üß© ÊãºÂõæÊ∏∏Êàè";

    // ÁïåÈù¢Ê†áÁ≠æ
    static final String STATUS_LABEL = "Áä∂ÊÄÅ: ";
    static final String MOVES_LABEL = "Ê≠•Êï∞: ";
    static final String LOAD_IMAGE_BUTTON = "Âä†ËΩΩÂõæÁâá";
    static final String SHUFFLE_BUTTON = "Êâì‰π±";
    static final String PREVIEW_BUTTON = "È¢ÑËßà";
    static final String DIFFICULTY_LABEL = "ÈöæÂ∫¶: ";

    // ÈöæÂ∫¶ÈÄâÈ°π
    static final String DIFFICULTY_EASY = "ÁÆÄÂçï (3x3)";
    static final String DIFFICULTY_MEDIUM = "‰∏≠Á≠â (4x4)";
    static final String DIFFICULTY_HARD = "Âõ∞Èöæ (5x5)";

    // Áä∂ÊÄÅÊ∂àÊÅØ
    static final String STATUS_START_GAME = "ÁÇπÂáªÂä†ËΩΩÂõæÁâáÂºÄÂßãÊ∏∏Êàè";
    static final String STATUS_PUZZLE_COMPLETED = "üéâ ÊÅ≠ÂñúÔºÅÊãºÂõæÂÆåÊàêÔºÅ";
    static final String STATUS_SELECT_PIECE = "ËØ∑ÈÄâÊã©‰∏ÄÂùóÊãºÂõæ";
    static final String STATUS_PIECE_PLACED = "ÊãºÂõæÊîæÁΩÆÊàêÂäü";
    static final String STATUS_WRONG_PLACE = "‰ΩçÁΩÆ‰∏çÊ≠£Á°ÆÔºåËØ∑ÈáçËØï";
    static final String STATUS_PREVIEW_ON = "È¢ÑËßàÊ®°ÂºèÂºÄÂêØ";
    static final String STATUS_PREVIEW_OFF = "È¢ÑËßàÊ®°ÂºèÂÖ≥Èó≠";
    static final String STATUS_PUZZLE_SHUFFLED = "ÊãºÂõæÂ∑≤Êâì‰π±";
    static final String STATUS_IMAGE_LOADED = "ÂõæÁâáÂä†ËΩΩÊàêÂäü";
    static final String STATUS_IMAGE_LOAD_FAILED = "ÂõæÁâáÂä†ËΩΩÂ§±Ë¥•";

    // Êñá‰ª∂ÂØπËØùÊ°Ü
    static final String IMAGE_FILE_FILTER = "ÂõæÁâáÊñá‰ª∂";
    static final String SUPPORTED_FORMATS = "jpg,jpeg,png,gif,bmp";

    // ÂÆåÊàêÊ∂àÊÅØ
    static final String COMPLETION_MESSAGE = "ÊãºÂõæÂÆåÊàêÔºÅ\nÁî®Êó∂: %d Ê≠•";
    static final String COMPLETION_TITLE = "ÊÅ≠ÂñúÂÆåÊàê";

    // Â∏ÆÂä©‰ø°ÊÅØ
    static final String HELP_MESSAGE = """
        ÊãºÂõæÊ∏∏Êàè‰ΩøÁî®ËØ¥ÊòéÔºö

        ‚Ä¢ Ê∏∏ÊàèÁõÆÊ†áÔºöÂ∞ÜÊâì‰π±ÁöÑÂõæÁâáÁâáÊÆµÈáçÊñ∞ÊãºÊàêÂÆåÊï¥ÁöÑÂõæÁâá
        ‚Ä¢ Ê∏∏ÊàèËßÑÂàôÔºöÂ∞ÜÊãºÂõæÂùóÊãñÊãΩÂà∞Ê≠£Á°ÆÁöÑ‰ΩçÁΩÆ
        ‚Ä¢ ËÆ°ÂàÜËßÑÂàôÔºöÁßªÂä®Ê≠•Êï∞Ë∂äÂ∞ëÔºåÂÆåÊàêÊó∂Èó¥Ë∂äÁü≠Ë∂äÂ•Ω

        Êìç‰ΩúËØ¥ÊòéÔºö
        ‚Ä¢ Èº†Ê†áÁÇπÂáªÔºöÈÄâÊã©ÊãºÂõæÂùó
        ‚Ä¢ Èº†Ê†áÊãñÊãΩÔºöÁßªÂä®ÊãºÂõæÂùó
        ‚Ä¢ È¢ÑËßàÊåâÈíÆÔºöÊü•ÁúãÂÆåÊï¥ÂõæÁâá
        ‚Ä¢ Êâì‰π±ÊåâÈíÆÔºöÈáçÊñ∞Êâì‰π±ÊãºÂõæ

        Ê∏∏ÊàèÊäÄÂ∑ßÔºö
        ‚Ä¢ ÂÖàÊâæÂà∞ËæπÁºòÂíåËßíËêΩÁöÑÊãºÂõæÂùó
        ‚Ä¢ ÊåâÈ¢úËâ≤ÊàñÂõæÊ°àÁâπÂæÅÂàÜÁ±ªÊãºÂõæÂùó
        ‚Ä¢ ‰ªéËæπÁºòÂêë‰∏≠ÂøÉÈÄêÊ≠•ÊãºÊé•
        ‚Ä¢ Âà©Áî®È¢ÑËßàÂäüËÉΩÂèÇËÄÉÂéüÂõæ

        ÈöæÂ∫¶ËØ¥ÊòéÔºö
        ‚Ä¢ ÁÆÄÂçïÔºö3x3ÁΩëÊ†ºÔºå9‰∏™ÊãºÂõæÂùó
        ‚Ä¢ ‰∏≠Á≠âÔºö4x4ÁΩëÊ†ºÔºå16‰∏™ÊãºÂõæÂùó
        ‚Ä¢ Âõ∞ÈöæÔºö5x5ÁΩëÊ†ºÔºå25‰∏™ÊãºÂõæÂùó

        Âø´Êç∑ÈîÆÔºö
        Ctrl+L - Âä†ËΩΩÂõæÁâá
        Ctrl+S - Êâì‰π±ÊãºÂõæ
        Ctrl+P - ÂàáÊç¢È¢ÑËßà
        Ctrl+H - ÊòæÁ§∫Â∏ÆÂä©
        F1 - ÊòæÁ§∫Â∏ÆÂä©
        """;
}

void main(String[] args) {
    SwingUtilities.invokeLater(() -> {
        new JigsawPuzzle().setVisible(true);
    });
}

static class JigsawPuzzle extends JFrame {
    private static final int GRID_SIZE = 4; // 4x4ÊãºÂõæ
    private static final int PIECE_SIZE = 100;
    private static final int PANEL_WIDTH = GRID_SIZE * PIECE_SIZE;
    private static final int PANEL_HEIGHT = GRID_SIZE * PIECE_SIZE;

    private JPanel puzzlePanel;
    private JPanel piecesPanel;
    private JLabel statusLabel;
    private JLabel movesLabel;
    private JButton loadImageButton;
    private JButton shuffleButton;
    private JButton previewButton;
    private JComboBox<String> difficultyCombo;

    private BufferedImage originalImage;
    private List<PuzzlePiece> pieces;
    private List<PuzzlePiece> placedPieces;
    private PuzzlePiece selectedPiece = null;
    private Point selectedPoint = null;
    private boolean showPreview = false;
    private int moves = 0;
    private int currentDifficulty = 0;

    public JigsawPuzzle() {
        initializeGUI();
        createDefaultPuzzle();
        setupKeyboardShortcuts();
        setLocationRelativeTo(null);
    }

    private void initializeGUI() {
        setTitle(Texts.WINDOW_TITLE);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout());

        // È°∂ÈÉ®ÊéßÂà∂Èù¢Êùø
        JPanel controlPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 10, 10));
        controlPanel.setBackground(new Color(245, 247, 250));
        controlPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

        loadImageButton = createButton(Texts.LOAD_IMAGE_BUTTON, new Color(39, 174, 96), e -> loadImage());
        shuffleButton = createButton(Texts.SHUFFLE_BUTTON, new Color(243, 156, 18), e -> shufflePieces());
        previewButton = createButton(Texts.PREVIEW_BUTTON, new Color(52, 152, 219), e -> togglePreview());

        String[] difficulties = {Texts.DIFFICULTY_EASY, Texts.DIFFICULTY_MEDIUM, Texts.DIFFICULTY_HARD};
        difficultyCombo = new JComboBox<String>(difficulties);
        difficultyCombo.addActionListener(e -> changeDifficulty());

        controlPanel.add(new JLabel(Texts.DIFFICULTY_LABEL));
        controlPanel.add(difficultyCombo);
        controlPanel.add(loadImageButton);
        controlPanel.add(shuffleButton);
        controlPanel.add(previewButton);

        // Áä∂ÊÄÅÈù¢Êùø
        JPanel statusPanel = new JPanel(new GridLayout(1, 2, 20, 10));
        statusPanel.setBackground(new Color(245, 247, 250));
        statusPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

        statusLabel = new JLabel(Texts.STATUS_START_GAME, SwingConstants.CENTER);
        statusLabel.setFont(new Font("SF Pro Display", Font.BOLD, 16));
        statusLabel.setForeground(new Color(52, 73, 94));

        movesLabel = new JLabel(Texts.MOVES_LABEL + "0", SwingConstants.CENTER);
        movesLabel.setFont(new Font("SF Pro Display", Font.PLAIN, 14));
        movesLabel.setForeground(new Color(127, 140, 141));

        statusPanel.add(statusLabel);
        statusPanel.add(movesLabel);

        // ‰∏ªÊ∏∏ÊàèÂå∫Âüü
        JPanel gamePanel = new JPanel(new BorderLayout(10, 10));
        gamePanel.setBackground(new Color(245, 247, 250));
        gamePanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

        // ÊãºÂõæÈù¢Êùø
        puzzlePanel = new JPanel() {
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                drawPuzzle(g);
            }
        };
        puzzlePanel.setPreferredSize(new Dimension(PANEL_WIDTH + 20, PANEL_HEIGHT + 20));
        puzzlePanel.setBackground(Color.WHITE);
        puzzlePanel.setBorder(BorderFactory.createLineBorder(new Color(189, 195, 199)));
        puzzlePanel.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                handlePuzzleClick(e);
            }
        });

        // ÊãºÂõæÂùóÈù¢Êùø
        piecesPanel = new JPanel();
        piecesPanel.setLayout(new FlowLayout(FlowLayout.LEFT, 5, 5));
        piecesPanel.setBackground(new Color(245, 247, 250));
        piecesPanel.setBorder(BorderFactory.createTitledBorder(Texts.STATUS_LABEL.substring(0, Texts.STATUS_LABEL.length() - 2)));

        JScrollPane piecesScrollPane = new JScrollPane(piecesPanel);
        piecesScrollPane.setPreferredSize(new Dimension(PANEL_WIDTH + 40, 200));
        piecesScrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        piecesScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_NEVER);

        gamePanel.add(puzzlePanel, BorderLayout.CENTER);
        gamePanel.add(piecesScrollPane, BorderLayout.SOUTH);

        // ÁªÑË£ÖÁïåÈù¢
        JPanel topContainer = new JPanel(new BorderLayout());
        topContainer.add(controlPanel, BorderLayout.NORTH);
        topContainer.add(statusPanel, BorderLayout.CENTER);

        add(topContainer, BorderLayout.NORTH);
        add(gamePanel, BorderLayout.CENTER);

        setSize(900, 700);
    }

    private JButton createButton(String text, Color bgColor, ActionListener listener) {
        JButton button = new JButton(text);
        button.setFont(new Font("SF Pro Display", Font.BOLD, 14));
        button.setBackground(bgColor);
        button.setForeground(Color.WHITE);
        button.setFocusPainted(false);
        button.setBorder(BorderFactory.createEmptyBorder(8, 15, 8, 15));
        button.setCursor(new Cursor(Cursor.HAND_CURSOR));
        button.addActionListener(listener);
        return button;
    }

    private void createDefaultPuzzle() {
        // ÂàõÂª∫ÈªòËÆ§ÁöÑÂΩ©Ëâ≤ÊãºÂõæ
        int width = GRID_SIZE * PIECE_SIZE;
        int height = GRID_SIZE * PIECE_SIZE;
        originalImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
        Graphics2D g2d = originalImage.createGraphics();

        // ÁªòÂà∂ÂΩ©Ëâ≤Ê∏êÂèòÂõæÊ°à
        for (int i = 0; i < GRID_SIZE; i++) {
            for (int j = 0; j < GRID_SIZE; j++) {
                int red = (int) (Math.random() * 256);
                int green = (int) (Math.random() * 256);
                int blue = (int) (Math.random() * 256);
                g2d.setColor(new Color(red, green, blue));
                g2d.fillRect(j * PIECE_SIZE, i * PIECE_SIZE, PIECE_SIZE, PIECE_SIZE);

                // Ê∑ªÂä†ËæπÊ°ÜÂíåÊï∞Â≠ó
                g2d.setColor(Color.BLACK);
                g2d.drawRect(j * PIECE_SIZE, i * PIECE_SIZE, PIECE_SIZE, PIECE_SIZE);
                g2d.setFont(new Font("Arial", Font.BOLD, 24));
                String text = String.valueOf(i * GRID_SIZE + j + 1);
                FontMetrics fm = g2d.getFontMetrics();
                int textWidth = fm.stringWidth(text);
                int textHeight = fm.getHeight();
                g2d.drawString(text, j * PIECE_SIZE + (PIECE_SIZE - textWidth) / 2,
                        i * PIECE_SIZE + (PIECE_SIZE + textHeight) / 2 - fm.getDescent());
            }
        }

        g2d.dispose();
        createPuzzlePieces();
    }

    private void loadImage() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter(
                "ÂõæÁâáÊñá‰ª∂", "jpg", "jpeg", "png", "gif", "bmp"));

        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            try {
                BufferedImage image = ImageIO.read(file);
                if (image != null) {
                    // Ë∞ÉÊï¥ÂõæÁâáÂ§ßÂ∞è
                    Image scaledImage = image.getScaledInstance(PANEL_WIDTH, PANEL_HEIGHT, Image.SCALE_SMOOTH);
                    originalImage = new BufferedImage(PANEL_WIDTH, PANEL_HEIGHT, BufferedImage.TYPE_INT_RGB);
                    Graphics2D g2d = originalImage.createGraphics();
                    g2d.drawImage(scaledImage, 0, 0, null);
                    g2d.dispose();

                    createPuzzlePieces();
                    statusLabel.setText(Texts.STATUS_IMAGE_LOADED + "ÔºÅ");
                }
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Êó†Ê≥ïÂä†ËΩΩÂõæÁâá: " + e.getMessage(),
                        "ÈîôËØØ", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void createPuzzlePieces() {
        pieces = new ArrayList<PuzzlePiece>();
        placedPieces = new ArrayList<PuzzlePiece>();
        selectedPiece = null;
        moves = 0;

        int gridSize = getCurrentGridSize();
        int pieceWidth = PANEL_WIDTH / gridSize;
        int pieceHeight = PANEL_HEIGHT / gridSize;

        for (int row = 0; row < gridSize; row++) {
            for (int col = 0; col < gridSize; col++) {
                int x = col * pieceWidth;
                int y = row * pieceHeight;
                BufferedImage pieceImage = originalImage.getSubimage(x, y, pieceWidth, pieceHeight);

                PuzzlePiece piece = new PuzzlePiece(pieceImage, row, col, row * gridSize + col);
                pieces.add(piece);
            }
        }

        shufflePieces();
        updatePiecesPanel();
        updateDisplay();
    }

    private int getCurrentGridSize() {
        return 4 + currentDifficulty; // 4x4, 5x5, 6x6
    }

    private void shufflePieces() {
        Collections.shuffle(pieces);
    }

    private void updatePiecesPanel() {
        piecesPanel.removeAll();

        for (PuzzlePiece piece : pieces) {
            JButton pieceButton = new JButton(new ImageIcon(piece.image));
            pieceButton.setPreferredSize(new Dimension(80, 80));
            pieceButton.addActionListener(e -> selectPiece(piece));
            piecesPanel.add(pieceButton);
        }

        piecesPanel.revalidate();
        piecesPanel.repaint();
    }

    private void selectPiece(PuzzlePiece piece) {
        if (selectedPiece == piece) {
            selectedPiece = null;
            selectedPoint = null;
            puzzlePanel.repaint();
            return;
        }

        selectedPiece = piece;
        puzzlePanel.repaint();
        statusLabel.setText(Texts.STATUS_SELECT_PIECE);
    }

    private void handlePuzzleClick(MouseEvent e) {
        if (selectedPiece == null) {
            statusLabel.setText(Texts.STATUS_SELECT_PIECE);
            return;
        }

        int gridSize = getCurrentGridSize();
        int pieceWidth = PANEL_WIDTH / gridSize;
        int pieceHeight = PANEL_HEIGHT / gridSize;

        int col = (e.getX() - 10) / pieceWidth;
        int row = (e.getY() - 10) / pieceHeight;

        if (row >= 0 && row < gridSize && col >= 0 && col < gridSize) {
            placePiece(selectedPiece, row, col);
        }
    }

    private void placePiece(PuzzlePiece piece, int row, int col) {
        if (piece.correctRow == row && piece.correctCol == col) {
            // ÊîæÁΩÆÊ≠£Á°Æ
            piece.currentRow = row;
            piece.currentCol = col;
            piece.isPlaced = true;
            pieces.remove(piece);
            placedPieces.add(piece);

            moves++;
            updateDisplay();
            updatePiecesPanel();

            statusLabel.setText(Texts.STATUS_PIECE_PLACED + "ÔºÅ");
            statusLabel.setForeground(new Color(39, 174, 96));

            selectedPiece = null;
            puzzlePanel.repaint();

            // Ê£ÄÊü•ÊòØÂê¶ÂÆåÊàê
            checkCompletion();
        } else {
            // ÊîæÁΩÆÈîôËØØ
            statusLabel.setText(Texts.STATUS_WRONG_PLACE);
            statusLabel.setForeground(new Color(231, 76, 60));
        }
    }

    private void checkCompletion() {
        if (pieces.isEmpty()) {
            // ÊãºÂõæÂÆåÊàê
            statusLabel.setText(Texts.STATUS_PUZZLE_COMPLETED);
            statusLabel.setForeground(new Color(39, 174, 96));

            JOptionPane.showMessageDialog(this,
                    String.format("ÊãºÂõæÂÆåÊàêÔºÅ\nÁßªÂä®Ê¨°Êï∞: %d", moves),
                    "ÂÆåÊàê", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void changeDifficulty() {
        currentDifficulty = difficultyCombo.getSelectedIndex();
        if (originalImage != null) {
            createPuzzlePieces();
        }
    }

    private void togglePreview() {
        showPreview = !showPreview;
        previewButton.setText(showPreview ? "ÈöêËóèÈ¢ÑËßà" : "ÊòæÁ§∫È¢ÑËßà");
        puzzlePanel.repaint();
    }

    private void updateDisplay() {
        movesLabel.setText(String.format("ÁßªÂä®Ê¨°Êï∞: %d", moves));
    }

    private void drawPuzzle(Graphics g) {
        if (originalImage == null) return;

        int gridSize = getCurrentGridSize();
        int pieceWidth = PANEL_WIDTH / gridSize;
        int pieceHeight = PANEL_HEIGHT / gridSize;

        // ÁªòÂà∂ÁΩëÊ†º
        g.setColor(new Color(200, 200, 200));
        for (int i = 0; i <= gridSize; i++) {
            g.drawLine(i * pieceWidth + 10, 10, i * pieceWidth + 10, PANEL_HEIGHT + 10);
            g.drawLine(10, i * pieceHeight + 10, PANEL_WIDTH + 10, i * pieceHeight + 10);
        }

        // ÁªòÂà∂Â∑≤ÊîæÁΩÆÁöÑÊãºÂõæÂùó
        for (PuzzlePiece piece : placedPieces) {
            int x = piece.currentCol * pieceWidth + 10;
            int y = piece.currentRow * pieceHeight + 10;
            g.drawImage(piece.image, x, y, null);

            // È´ò‰∫ÆÊòæÁ§∫ÈÄâ‰∏≠ÁöÑÊãºÂõæÂùó
            if (piece == selectedPiece) {
                g.setColor(new Color(255, 255, 0, 100));
                g.fillRect(x, y, pieceWidth, pieceHeight);
            }
        }

        // ÊòæÁ§∫È¢ÑËßà
        if (showPreview) {
            g.setColor(new Color(0, 0, 0, 50));
            g.drawImage(originalImage, 10, 10, PANEL_WIDTH, PANEL_HEIGHT, null);
        }
    }

    private static class PuzzlePiece {
        BufferedImage image;
        int correctRow;
        int correctCol;
        int id;
        int currentRow = -1;
        int currentCol = -1;
        boolean isPlaced = false;

        PuzzlePiece(BufferedImage image, int correctRow, int correctCol, int id) {
            this.image = image;
            this.correctRow = correctRow;
            this.correctCol = correctCol;
            this.id = id;
        }
    }

    private void setupKeyboardShortcuts() {
        // Ê∑ªÂä†ÈîÆÁõòÂø´Êç∑ÈîÆÊîØÊåÅ
        this.addKeyListener(new java.awt.event.KeyAdapter() {
            @Override
            public void keyPressed(java.awt.event.KeyEvent ev) {
                int keyCode = ev.getKeyCode();

                switch (keyCode) {
                    case KeyEvent.VK_L:
                        // Ctrl+L Âä†ËΩΩÂõæÁâá
                        if (ev.isControlDown()) {
                            loadImage();
                        }
                        break;
                    case KeyEvent.VK_S:
                        // Ctrl+S Êâì‰π±ÊãºÂõæ
                        if (ev.isControlDown()) {
                            shufflePieces();
                        }
                        break;
                    case KeyEvent.VK_P:
                        // Ctrl+P ÂàáÊç¢È¢ÑËßà
                        if (ev.isControlDown()) {
                            togglePreview();
                        }
                        break;
                    case KeyEvent.VK_H:
                        // Ctrl+H ÊòæÁ§∫Â∏ÆÂä©
                        if (ev.isControlDown()) {
                            showHelp();
                        }
                        break;
                    case KeyEvent.VK_F1:
                        // F1ÈîÆÊòæÁ§∫Â∏ÆÂä©
                        showHelp();
                        break;
                    default:
                        return;
                }
            }
        });

        // Á°Æ‰øùÁ™óÂè£ÂèØ‰ª•Ëé∑ÂæóÁÑ¶ÁÇπ
        this.setFocusable(true);
        this.requestFocusInWindow();
    }

    private void showHelp() {
        JOptionPane.showMessageDialog(this, Texts.HELP_MESSAGE, "Â∏ÆÂä©", JOptionPane.INFORMATION_MESSAGE);
    }
}