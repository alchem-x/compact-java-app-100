import javax.swing.*;
import javax.swing.border.AbstractBorder;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.text.DecimalFormat;

// ÊñáÊú¨ÁÆ°ÁêÜÈùôÊÄÅÂÜÖÈÉ®Á±ª
static class Texts {
    // Á™óÂè£Ê†áÈ¢ò
    static final String WINDOW_TITLE = "üå°Ô∏è Ê∏©Â∫¶ËΩ¨Êç¢Âô®";

    // ‰∏ªÁïåÈù¢Ê†áÈ¢ò
    static final String MAIN_TITLE = "üå°Ô∏è Ê∏©Â∫¶Âçï‰ΩçËΩ¨Êç¢Âô®";

    // ÊåâÈíÆÊñáÊú¨
    static final String CONVERT_BUTTON = "ËΩ¨Êç¢";
    static final String CLEAR_BUTTON = "Ê∏ÖÁ©∫";
    static final String COPY_BUTTON = "Â§çÂà∂ÁªìÊûú";
    static final String SWAP_BUTTON = "‰∫§Êç¢";

    // Èù¢ÊùøÊ†áÈ¢ò
    static final String INPUT_PANEL_TITLE = "ËæìÂÖ•Ê∏©Â∫¶";
    static final String OUTPUT_PANEL_TITLE = "ËΩ¨Êç¢ÁªìÊûú";
    static final String CONTROL_PANEL_TITLE = "ÊéßÂà∂ÈÄâÈ°π";

    // Ê†áÁ≠æÊñáÊú¨
    static final String INPUT_LABEL = "ËæìÂÖ•Ê∏©Â∫¶:";
    static final String FROM_UNIT_LABEL = "‰ªé:";
    static final String TO_UNIT_LABEL = "Âà∞:";
    static final String RESULT_LABEL = "ÁªìÊûú:";
    static final String FORMULA_LABEL = "ËΩ¨Êç¢ÂÖ¨Âºè:";

    // Ê∏©Â∫¶Âçï‰Ωç
    static final String UNIT_CELSIUS = "ÊëÑÊ∞èÂ∫¶ (¬∞C)";
    static final String UNIT_FAHRENHEIT = "ÂçéÊ∞èÂ∫¶ (¬∞F)";
    static final String UNIT_KELVIN = "ÂºÄÂ∞îÊñá (K)";
    static final String UNIT_RANKINE = "ÂÖ∞ÈáëÂ∫¶ (¬∞R)";
    static final String UNIT_REAUMUR = "ÂàóÊ∞èÂ∫¶ (¬∞R√©)";

    // Áä∂ÊÄÅÊ∂àÊÅØ
    static final String STATUS_READY = "Â∞±Áª™";
    static final String STATUS_CONVERTED = "ËΩ¨Êç¢ÂÆåÊàê";
    static final String STATUS_CLEARED = "ÂÜÖÂÆπÂ∑≤Ê∏ÖÁ©∫";
    static final String STATUS_COPIED = "ÁªìÊûúÂ∑≤Â§çÂà∂";
    static final String STATUS_SWAPPED = "Âçï‰ΩçÂ∑≤‰∫§Êç¢";

    // ÈîôËØØÊ∂àÊÅØ
    static final String ERROR_INVALID_INPUT = "ËØ∑ËæìÂÖ•ÊúâÊïàÁöÑÊï∞Â≠ó";
    static final String ERROR_OUT_OF_RANGE = "Ê∏©Â∫¶ÂÄºË∂ÖÂá∫ÊúâÊïàËåÉÂõ¥";
    static final String ERROR_COPY_FAILED = "Â§çÂà∂Â§±Ë¥•";

    // ÊèêÁ§∫‰ø°ÊÅØ
    static final String TIP_ABSOLUTE_ZERO = "ÊèêÁ§∫ÔºöÁªùÂØπÈõ∂Â∫¶‰∏∫ -273.15¬∞C";
    static final String TIP_WATER_FREEZING = "Ê∞¥ÁöÑÂÜ∞ÁÇπÔºö0¬∞C = 32¬∞F = 273.15K";
    static final String TIP_WATER_BOILING = "Ê∞¥ÁöÑÊ≤∏ÁÇπÔºö100¬∞C = 212¬∞F = 373.15K";

    // Á§∫‰æãÊ∏©Â∫¶
    static final String SAMPLE_TEMPERATURE = "25";

    // Ê∏©Â∫¶ËåÉÂõ¥
    static final String RANGE_CELSIUS = "-273.15 Âà∞ 1,000,000";
    static final String RANGE_FAHRENHEIT = "-459.67 Âà∞ 1,832,000";
    static final String RANGE_KELVIN = "0 Âà∞ 1,000,273.15";

    // Â∏ÆÂä©‰ø°ÊÅØ
    static final String HELP_MESSAGE = """
        Ê∏©Â∫¶ËΩ¨Êç¢Âô®‰ΩøÁî®ËØ¥ÊòéÔºö

        ‚Ä¢ ÊîØÊåÅÊëÑÊ∞èÂ∫¶„ÄÅÂçéÊ∞èÂ∫¶„ÄÅÂºÄÂ∞îÊñá„ÄÅÂÖ∞ÈáëÂ∫¶„ÄÅÂàóÊ∞èÂ∫¶‰πãÈó¥ÁöÑÁõ∏‰∫íËΩ¨Êç¢
        ‚Ä¢ ËæìÂÖ•Ê∏©Â∫¶ÂÄºÂπ∂ÈÄâÊã©Ê∫êÂçï‰ΩçÂíåÁõÆÊ†áÂçï‰Ωç
        ‚Ä¢ ÁÇπÂáª"ËΩ¨Êç¢"ÊåâÈíÆÊàñÊåâÂõûËΩ¶ÈîÆËøõË°åËΩ¨Êç¢
        ‚Ä¢ ‰ΩøÁî®"‰∫§Êç¢"ÊåâÈíÆÂèØ‰ª•Âø´ÈÄü‰∫§Êç¢Ê∫êÂçï‰ΩçÂíåÁõÆÊ†áÂçï‰Ωç
        ‚Ä¢ ËΩ¨Êç¢ÁªìÊûúÂèØ‰ª•Â§çÂà∂Âà∞Ââ™Ë¥¥Êùø

        Ê∏©Â∫¶Âçï‰ΩçËØ¥ÊòéÔºö
        ‚Ä¢ ÊëÑÊ∞èÂ∫¶ (¬∞C)ÔºöÊúÄÂ∏∏Áî®ÁöÑÊ∏©Â∫¶Âçï‰Ωç
        ‚Ä¢ ÂçéÊ∞èÂ∫¶ (¬∞F)Ôºö‰∏ªË¶ÅÂú®ÁæéÂõΩ‰ΩøÁî®
        ‚Ä¢ ÂºÄÂ∞îÊñá (K)ÔºöÁßëÂ≠¶ËÆ°ÁÆó‰ΩøÁî®ÁöÑÁªùÂØπÊ∏©Â∫¶Âçï‰Ωç
        ‚Ä¢ ÂÖ∞ÈáëÂ∫¶ (¬∞R)ÔºöÂ∑•Á®ãÈ¢ÜÂüü‰ΩøÁî®ÁöÑÁªùÂØπÊ∏©Â∫¶Âçï‰Ωç
        ‚Ä¢ ÂàóÊ∞èÂ∫¶ (¬∞R√©)ÔºöÂéÜÂè≤‰∏ä‰ΩøÁî®ÁöÑÊ∏©Â∫¶Âçï‰Ωç

        Âø´Êç∑ÈîÆÔºö
        Ctrl+C - ËΩ¨Êç¢Ê∏©Â∫¶
        Ctrl+L - Ê∏ÖÁ©∫
        Ctrl+P - Â§çÂà∂ÁªìÊûú
        Ctrl+X - ‰∫§Êç¢Âçï‰Ωç
        F1 - ÊòæÁ§∫Â∏ÆÂä©
        """;
}

void main(String[] args) {
    SwingUtilities.invokeLater(() -> new TemperatureConverter().setVisible(true));
}

static class TemperatureConverter extends JFrame {
    // ===== ËÆæËÆ°Á≥ªÁªüÂ∏∏Èáè =====
    // ‰∏ªË¶ÅÈ¢úËâ≤
    private static final Color BLUE = new Color(0, 122, 255);
    private static final Color GREEN = new Color(52, 199, 89);
    private static final Color RED = new Color(255, 59, 48);
    private static final Color ORANGE = new Color(255, 149, 0);
    private static final Color PURPLE = new Color(175, 82, 222);
    private static final Color TEAL = new Color(48, 176, 199);

    // ‰∏≠ÊÄßËâ≤
    private static final Color BLACK = new Color(0, 0, 0);
    private static final Color WHITE = new Color(255, 255, 255);
    private static final Color GRAY = new Color(142, 142, 147);
    private static final Color GRAY2 = new Color(174, 174, 178);
    private static final Color GRAY3 = new Color(199, 199, 204);
    private static final Color GRAY4 = new Color(209, 209, 214);
    private static final Color GRAY5 = new Color(229, 229, 234);
    private static final Color GRAY6 = new Color(242, 242, 247);

    // ËØ≠‰πâÈ¢úËâ≤
    private static final Color LABEL = new Color(0, 0, 0);
    private static final Color SECONDARY_LABEL = new Color(60, 60, 67, 153);
    private static final Color TERTIARY_LABEL = new Color(60, 60, 67, 76);

    // ËÉåÊôØ
    private static final Color SYSTEM_BACKGROUND = new Color(255, 255, 255);
    private static final Color SECONDARY_SYSTEM_BACKGROUND = new Color(242, 242, 247);

    // Â≠ó‰Ωì
    private static final Font LARGE_TITLE = new Font("SF Pro Display", Font.BOLD, 34);
    private static final Font TITLE1 = new Font("SF Pro Display", Font.BOLD, 28);
    private static final Font TITLE2 = new Font("SF Pro Display", Font.BOLD, 22);
    private static final Font TITLE3 = new Font("SF Pro Display", Font.BOLD, 20);
    private static final Font HEADLINE = new Font("SF Pro Display", Font.BOLD, 17);
    private static final Font SUBHEADLINE = new Font("SF Pro Display", Font.PLAIN, 15);
    private static final Font BODY = new Font("SF Pro Text", Font.PLAIN, 17);
    private static final Font CALLOUT = new Font("SF Pro Text", Font.PLAIN, 16);
    private static final Font FOOTNOTE = new Font("SF Pro Text", Font.PLAIN, 13);
    private static final Font CAPTION1 = new Font("SF Pro Text", Font.PLAIN, 12);
    private static final Font CAPTION2 = new Font("SF Pro Text", Font.PLAIN, 11);

    // Èó¥Ë∑ù
    private static final int SPACING_2 = 2;
    private static final int SPACING_4 = 4;
    private static final int SPACING_8 = 8;
    private static final int SPACING_12 = 12;
    private static final int SPACING_16 = 16;
    private static final int SPACING_20 = 20;
    private static final int SPACING_24 = 24;
    private static final int SPACING_32 = 32;

    // ÂúÜËßí
    private static final int RADIUS_4 = 4;
    private static final int RADIUS_8 = 8;
    private static final int RADIUS_12 = 12;
    private static final int RADIUS_16 = 16;
    private static final int RADIUS_20 = 20;

    // ÊåâÈíÆÂ∞∫ÂØ∏
    private static final Dimension BUTTON_REGULAR = new Dimension(120, 44);
    private static final Dimension BUTTON_LARGE = new Dimension(160, 50);

    // ===== Â∫îÁî®Áä∂ÊÄÅ =====
    private final JTextField celsiusField;
    private final JTextField fahrenheitField;
    private final JTextField kelvinField;
    private final JTextField rankineField;
    private final JButton convertButton;
    private final JButton clearButton;
    private final JLabel statusLabel;
    private final JTextArea infoArea;

    private final DecimalFormat df = new DecimalFormat("#.##");

    public TemperatureConverter() {
        celsiusField = new JTextField();
        fahrenheitField = new JTextField();
        kelvinField = new JTextField();
        rankineField = new JTextField();
        convertButton = this.createSuccessButton(Texts.CONVERT_BUTTON);
        clearButton = this.createWarningButton(Texts.CLEAR_BUTTON);
        statusLabel = new JLabel(Texts.STATUS_READY);
        infoArea = new JTextArea();

        initializeGUI();
        setupEventHandlers();
        loadSampleData();
        setupKeyboardShortcuts();
    }

    private void initializeGUI() {
        setTitle(Texts.WINDOW_TITLE);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout());
        getContentPane().setBackground(SYSTEM_BACKGROUND);

        // ÂàõÂª∫‰∏ªÈù¢Êùø
        createMainPanel();

        // ÂàõÂª∫‰ø°ÊÅØÈù¢Êùø
        createInfoPanel();

        // ÂàõÂª∫ÊéßÂà∂Èù¢Êùø
        createControlPanel();

        // ÂàõÂª∫Áä∂ÊÄÅÊ†è
        createStatusBar();

        setSize(500, 400);
        setLocationRelativeTo(null);
    }

    private void createMainPanel() {
        var mainPanel = new JPanel(new GridLayout(4, 2, SPACING_12, SPACING_12));
        mainPanel.setBackground(WHITE);
        mainPanel.setBorder(BorderFactory.createCompoundBorder(
            new RoundedBorder(RADIUS_12),
            BorderFactory.createEmptyBorder(SPACING_16, SPACING_16, SPACING_16, SPACING_16)
        ));

        // ÊëÑÊ∞èÂ∫¶
        var celsiusLabel = new JLabel(Texts.UNIT_CELSIUS + ":");
        celsiusLabel.setFont(HEADLINE);
        celsiusLabel.setForeground(LABEL);
        mainPanel.add(celsiusLabel);

        celsiusField.setFont(new Font("SF Mono", Font.PLAIN, 14));
        celsiusField.setBackground(GRAY6);
        celsiusField.setForeground(LABEL);
        celsiusField.setBorder(BorderFactory.createCompoundBorder(
            new RoundedBorder(RADIUS_8),
            BorderFactory.createEmptyBorder(SPACING_8, SPACING_12, SPACING_8, SPACING_12)
        ));
        mainPanel.add(celsiusField);

        // ÂçéÊ∞èÂ∫¶
        var fahrenheitLabel = new JLabel(Texts.UNIT_FAHRENHEIT + ":");
        fahrenheitLabel.setFont(HEADLINE);
        fahrenheitLabel.setForeground(LABEL);
        mainPanel.add(fahrenheitLabel);

        fahrenheitField.setFont(new Font("SF Mono", Font.PLAIN, 14));
        fahrenheitField.setBackground(GRAY6);
        fahrenheitField.setForeground(LABEL);
        fahrenheitField.setBorder(BorderFactory.createCompoundBorder(
            new RoundedBorder(RADIUS_8),
            BorderFactory.createEmptyBorder(SPACING_8, SPACING_12, SPACING_8, SPACING_12)
        ));
        mainPanel.add(fahrenheitField);

        // ÂºÄÂ∞îÊñá
        var kelvinLabel = new JLabel(Texts.UNIT_KELVIN + ":");
        kelvinLabel.setFont(HEADLINE);
        kelvinLabel.setForeground(LABEL);
        mainPanel.add(kelvinLabel);

        kelvinField.setFont(new Font("SF Mono", Font.PLAIN, 14));
        kelvinField.setBackground(GRAY6);
        kelvinField.setForeground(LABEL);
        kelvinField.setBorder(BorderFactory.createCompoundBorder(
            new RoundedBorder(RADIUS_8),
            BorderFactory.createEmptyBorder(SPACING_8, SPACING_12, SPACING_8, SPACING_12)
        ));
        mainPanel.add(kelvinField);

        // ÂÖ∞ÈáëÂ∫¶
        var rankineLabel = new JLabel(Texts.UNIT_RANKINE + ":");
        rankineLabel.setFont(HEADLINE);
        rankineLabel.setForeground(LABEL);
        mainPanel.add(rankineLabel);

        rankineField.setFont(new Font("SF Mono", Font.PLAIN, 14));
        rankineField.setBackground(GRAY6);
        rankineField.setForeground(LABEL);
        rankineField.setBorder(BorderFactory.createCompoundBorder(
            new RoundedBorder(RADIUS_8),
            BorderFactory.createEmptyBorder(SPACING_8, SPACING_12, SPACING_8, SPACING_12)
        ));
        mainPanel.add(rankineField);

        var wrapperPanel = new JPanel(new BorderLayout());
        wrapperPanel.setBackground(SYSTEM_BACKGROUND);
        wrapperPanel.add(mainPanel, BorderLayout.NORTH);
        wrapperPanel.setBorder(BorderFactory.createEmptyBorder(SPACING_24, SPACING_24, SPACING_24, SPACING_24));

        add(wrapperPanel, BorderLayout.NORTH);
    }

    private void createInfoPanel() {
        var infoPanel = new JPanel(new BorderLayout());
        infoPanel.setBackground(WHITE);
        infoPanel.setBorder(BorderFactory.createCompoundBorder(
            new RoundedBorder(RADIUS_12),
            BorderFactory.createEmptyBorder(SPACING_16, SPACING_16, SPACING_16, SPACING_16)
        ));

        var infoTitleLabel = new JLabel(Texts.CONTROL_PANEL_TITLE, SwingConstants.CENTER);
        infoTitleLabel.setFont(TITLE3);
        infoTitleLabel.setForeground(LABEL);
        infoTitleLabel.setBorder(BorderFactory.createEmptyBorder(0, 0, SPACING_12, 0));
        infoPanel.add(infoTitleLabel, BorderLayout.NORTH);

        infoArea.setFont(new Font("SF Mono", Font.PLAIN, 12));
        infoArea.setEditable(false);
        infoArea.setBackground(GRAY6);
        infoArea.setForeground(LABEL);
        infoArea.setRows(6);
        infoArea.setBorder(BorderFactory.createCompoundBorder(
            new RoundedBorder(RADIUS_8),
            BorderFactory.createEmptyBorder(SPACING_8, SPACING_8, SPACING_8, SPACING_8)
        ));

        var scrollPane = new JScrollPane(infoArea);
        scrollPane.setBorder(BorderFactory.createEmptyBorder());
        scrollPane.getViewport().setBackground(GRAY6);
        infoPanel.add(scrollPane, BorderLayout.CENTER);

        add(infoPanel, BorderLayout.CENTER);
    }

    private void createControlPanel() {
        var controlPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, SPACING_16, SPACING_16));
        controlPanel.setBackground(SYSTEM_BACKGROUND);

        convertButton.addActionListener(this::performConversion);
        clearButton.addActionListener(this::clearAll);

        controlPanel.add(convertButton);
        controlPanel.add(clearButton);

        add(controlPanel, BorderLayout.SOUTH);
    }

    private void createStatusBar() {
        var statusPanel = new JPanel(new BorderLayout());
        statusPanel.setBackground(SECONDARY_SYSTEM_BACKGROUND);
        statusPanel.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createMatteBorder(1, 0, 0, 0, GRAY4),
            BorderFactory.createEmptyBorder(SPACING_8, SPACING_16, SPACING_8, SPACING_16)
        ));

        statusLabel.setFont(FOOTNOTE);
        statusLabel.setForeground(SECONDARY_LABEL);
        statusPanel.add(statusLabel, BorderLayout.WEST);

        add(statusPanel, BorderLayout.PAGE_END);
    }

    private void setupEventHandlers() {
        convertButton.addActionListener(this::performConversion);
        clearButton.addActionListener(this::clearAll);

        // ‰∏∫ÊØè‰∏™ËæìÂÖ•Ê°ÜÊ∑ªÂä†ÂõûËΩ¶ÈîÆÁõëÂê¨ - ‰ΩøÁî®ÊñπÊ≥ïÂºïÁî®
        celsiusField.addActionListener(this::performConversion);
        fahrenheitField.addActionListener(this::performConversion);
        kelvinField.addActionListener(this::performConversion);
        rankineField.addActionListener(this::performConversion);
    }

    private void loadSampleData() {
        celsiusField.setText(Texts.SAMPLE_TEMPERATURE);
        performConversion(null);
    }

    private void performConversion(ActionEvent e) {
        try {
            double celsius = 0;
            var sourceUnit = "";

            // Á°ÆÂÆöËæìÂÖ•Ê∫êÂπ∂ËΩ¨Êç¢‰∏∫ÊëÑÊ∞èÂ∫¶
            if (!celsiusField.getText().trim().isEmpty()) {
                celsius = Double.parseDouble(celsiusField.getText().trim());
                sourceUnit = "ÊëÑÊ∞èÂ∫¶";
            } else if (!fahrenheitField.getText().trim().isEmpty()) {
                var fahrenheit = Double.parseDouble(fahrenheitField.getText().trim());
                celsius = (fahrenheit - 32) * 5.0 / 9.0;
                sourceUnit = "ÂçéÊ∞èÂ∫¶";
            } else if (!kelvinField.getText().trim().isEmpty()) {
                var kelvin = Double.parseDouble(kelvinField.getText().trim());
                celsius = kelvin - 273.15;
                sourceUnit = "ÂºÄÂ∞îÊñá";
            } else if (!rankineField.getText().trim().isEmpty()) {
                var rankine = Double.parseDouble(rankineField.getText().trim());
                celsius = (rankine - 491.67) * 5.0 / 9.0;
                sourceUnit = "ÂÖ∞ÈáëÂ∫¶";
            } else {
                statusLabel.setText(Texts.ERROR_INVALID_INPUT);
                return;
            }

            // ËÆ°ÁÆóÊâÄÊúâÊ∏©Â∫¶Âçï‰Ωç
            var fahrenheit = celsius * 9.0 / 5.0 + 32;
            var kelvin = celsius + 273.15;
            var rankine = (celsius + 273.15) * 9.0 / 5.0;

            // Êõ¥Êñ∞ÊâÄÊúâÂ≠óÊÆµ
            celsiusField.setText(df.format(celsius));
            fahrenheitField.setText(df.format(fahrenheit));
            kelvinField.setText(df.format(kelvin));
            rankineField.setText(df.format(rankine));

            // Êõ¥Êñ∞‰ø°ÊÅØÈù¢Êùø
            updateTemperatureInfo(celsius);

            statusLabel.setText(Texts.STATUS_CONVERTED + " - Ê∫ê: " + sourceUnit);

        } catch (NumberFormatException ex) {
            statusLabel.setText(Texts.ERROR_INVALID_INPUT);
            JOptionPane.showMessageDialog(this,
                Texts.ERROR_INVALID_INPUT,
                "Ê†ºÂºèÈîôËØØ",
                JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex) {
            statusLabel.setText(Texts.ERROR_OUT_OF_RANGE);
            JOptionPane.showMessageDialog(this,
                Texts.ERROR_OUT_OF_RANGE + ": " + ex.getMessage(),
                "ÈîôËØØ",
                JOptionPane.ERROR_MESSAGE);
        }
    }

    private void updateTemperatureInfo(double celsius) {
        var info = new StringBuilder();
        info.append("=== Ê∏©Â∫¶ËΩ¨Êç¢ÁªìÊûú ===\n\n");

        info.append("ÊëÑÊ∞èÂ∫¶: ").append(df.format(celsius)).append(" ¬∞C\n");
        info.append("ÂçéÊ∞èÂ∫¶: ").append(df.format(celsius * 9.0 / 5.0 + 32)).append(" ¬∞F\n");
        info.append("ÂºÄÂ∞îÊñá: ").append(df.format(celsius + 273.15)).append(" K\n");
        info.append("ÂÖ∞ÈáëÂ∫¶: ").append(df.format((celsius + 273.15) * 9.0 / 5.0)).append(" ¬∞R\n\n");

        info.append("=== Ê∏©Â∫¶ÂèÇËÄÉ ===\n");

        // Ê∑ªÂä†‰∏Ä‰∫õÊúâË∂£ÁöÑÊ∏©Â∫¶ÂèÇËÄÉÁÇπ
        if (celsius <= -273.15) {
            info.append("‚ö†Ô∏è ‰Ωé‰∫éÁªùÂØπÈõ∂Â∫¶ÔºÅ");
        } else if (celsius < -40) {
            info.append("ü•∂ ÊûÅÂú∞Ê∏©Â∫¶");
        } else if (celsius < 0) {
            info.append("‚ùÑÔ∏è ÂÜ∞ÁÇπ‰ª•‰∏ã");
        } else if (celsius == 0) {
            info.append("üßä Ê∞¥ÁöÑÂÜ∞ÁÇπ");
        } else if (celsius < 10) {
            info.append("üå®Ô∏è ÂØíÂÜ∑");
        } else if (celsius < 20) {
            info.append("üòä ÂáâÁàΩ");
        } else if (celsius < 30) {
            info.append("üå§Ô∏è ËàíÈÄÇ");
        } else if (celsius < 40) {
            info.append("üåû Ê∏©Êöñ");
        } else if (celsius < 50) {
            info.append("üî• ÁÇéÁÉ≠");
        } else if (celsius >= 100) {
            info.append("üí® Ê∞¥ÁöÑÊ≤∏ÁÇπ");
        } else {
            info.append("üå°Ô∏è È´òÊ∏©");
        }

        info.append("\n\n=== Â∏∏ËßÅÊ∏©Â∫¶ÂèÇËÄÉ ===\n");
        info.append("‰∫∫‰Ωì‰ΩìÊ∏©: 37¬∞C (98.6¬∞F)\n");
        info.append("ÂÆ§Ê∏©: 20-25¬∞C (68-77¬∞F)\n");
        info.append("Ê∞¥ÁöÑÂÜ∞ÁÇπ: 0¬∞C (32¬∞F)\n");
        info.append("Ê∞¥ÁöÑÊ≤∏ÁÇπ: 100¬∞C (212¬∞F)\n");
        info.append("ÁªùÂØπÈõ∂Â∫¶: -273.15¬∞C (-459.67¬∞F)");

        infoArea.setText(info.toString());
    }

    private void clearAll(ActionEvent e) {
        celsiusField.setText("");
        fahrenheitField.setText("");
        kelvinField.setText("");
        rankineField.setText("");
        infoArea.setText("");
        statusLabel.setText(Texts.STATUS_CLEARED);
    }

    // ===== ÊåâÈíÆÂàõÂª∫ÊñπÊ≥ï =====
    private JButton createPrimaryButton(String text) {
        return this.createStyledButton(text, BLUE, WHITE);
    }

    private JButton createSecondaryButton(String text) {
        return this.createStyledButton(text, GRAY6, LABEL);
    }

    private JButton createSuccessButton(String text) {
        return this.createStyledButton(text, GREEN, WHITE);
    }

    private JButton createWarningButton(String text) {
        return this.createStyledButton(text, ORANGE, WHITE);
    }

    private JButton createStyledButton(String text, Color backgroundColor, Color textColor) {
        var button = new JButton(text);
        button.setFont(HEADLINE);
        button.setBackground(backgroundColor);
        button.setForeground(textColor);
        button.setBorderPainted(false);
        button.setFocusPainted(false);
        button.setContentAreaFilled(true);
        button.setOpaque(true);
        button.setBorder(BorderFactory.createCompoundBorder(
            new RoundedBorder(RADIUS_8),
            BorderFactory.createEmptyBorder(SPACING_12, SPACING_16, SPACING_12, SPACING_16)
        ));
        button.setPreferredSize(BUTTON_REGULAR);

        // ËÆæÁΩÆÊÇ¨ÂÅúÊïàÊûú
        this.setupButtonHoverEffect(button, backgroundColor);

        return button;
    }

    private void setupButtonHoverEffect(JButton button, Color originalColor) {
        button.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseEntered(java.awt.event.MouseEvent ev) {
                if (button.isEnabled()) {
                    button.setBackground(darkenColor(originalColor, 0.1f));
                    button.setCursor(new Cursor(Cursor.HAND_CURSOR));
                }
            }

            @Override
            public void mouseExited(java.awt.event.MouseEvent ev) {
                if (button.isEnabled()) {
                    button.setBackground(originalColor);
                }
                button.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            }
        });
    }

    private Color darkenColor(Color color, float factor) {
        return new Color(
            Math.max(0, (int) (color.getRed() * (1 - factor))),
            Math.max(0, (int) (color.getGreen() * (1 - factor))),
            Math.max(0, (int) (color.getBlue() * (1 - factor))),
            color.getAlpha()
        );
    }

    private void setupKeyboardShortcuts() {
        // Ê∑ªÂä†ÈîÆÁõòÂø´Êç∑ÈîÆÊîØÊåÅ
        this.addKeyListener(new java.awt.event.KeyAdapter() {
            @Override
            public void keyPressed(java.awt.event.KeyEvent ev) {
                int keyCode = ev.getKeyCode();

                switch (keyCode) {
                    case KeyEvent.VK_C:
                        // CÈîÆËΩ¨Êç¢Ê∏©Â∫¶
                        if (ev.isControlDown()) {
                            performConversion(null);
                        }
                        break;
                    case KeyEvent.VK_L:
                        // LÈîÆÊ∏ÖÁ©∫
                        if (ev.isControlDown()) {
                            clearAll(null);
                        }
                        break;
                    case KeyEvent.VK_P:
                        // PÈîÆÂ§çÂà∂ÁªìÊûú
                        if (ev.isControlDown()) {
                            copyResults();
                        }
                        break;
                    case KeyEvent.VK_X:
                        // XÈîÆ‰∫§Êç¢Âçï‰Ωç
                        if (ev.isControlDown()) {
                            swapUnits();
                        }
                        break;
                    case KeyEvent.VK_F1:
                        // F1ÈîÆÊòæÁ§∫Â∏ÆÂä©
                        showHelp();
                        break;
                    default:
                        return;
                }
            }
        });

        // Á°Æ‰øùÁ™óÂè£ÂèØ‰ª•Ëé∑ÂæóÁÑ¶ÁÇπ
        this.setFocusable(true);
        this.requestFocusInWindow();
    }

    private void copyResults() {
        String celsius = celsiusField.getText();
        String fahrenheit = fahrenheitField.getText();
        String kelvin = kelvinField.getText();
        String rankine = rankineField.getText();

        if (!celsius.isEmpty() || !fahrenheit.isEmpty() || !kelvin.isEmpty() || !rankine.isEmpty()) {
            String result = String.format("Ê∏©Â∫¶ËΩ¨Êç¢ÁªìÊûú:\nÊëÑÊ∞èÂ∫¶: %s¬∞C\nÂçéÊ∞èÂ∫¶: %s¬∞F\nÂºÄÂ∞îÊñá: %sK\nÂÖ∞ÈáëÂ∫¶: %s¬∞R",
                celsius, fahrenheit, kelvin, rankine);
            var stringSelection = new java.awt.datatransfer.StringSelection(result);
            java.awt.Toolkit.getDefaultToolkit().getSystemClipboard().setContents(stringSelection, null);
            statusLabel.setText(Texts.STATUS_COPIED);
        }
    }

    private void swapUnits() {
        // ‰∫§Êç¢ÊëÑÊ∞èÂ∫¶ÂíåÂçéÊ∞èÂ∫¶ÁöÑÂÄº
        String celsius = celsiusField.getText();
        String fahrenheit = fahrenheitField.getText();
        celsiusField.setText(fahrenheit);
        fahrenheitField.setText(celsius);
        statusLabel.setText(Texts.STATUS_SWAPPED);
    }

    private void showHelp() {
        JOptionPane.showMessageDialog(this, Texts.HELP_MESSAGE, "Â∏ÆÂä©", JOptionPane.INFORMATION_MESSAGE);
    }

    /**
     * ÂúÜËßíËæπÊ°ÜÁ±ª
     */
    private static class RoundedBorder extends AbstractBorder {
        private final int radius;
        private final Color borderColor;
        private final int thickness;

        public RoundedBorder(int radius) {
            this(radius, GRAY3, 1);
        }

        public RoundedBorder(int radius, Color borderColor, int thickness) {
            this.radius = radius;
            this.borderColor = borderColor;
            this.thickness = thickness;
        }

        @Override
        public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) {
            var g2d = (Graphics2D) g.create();
            g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
            g2d.setColor(borderColor);
            g2d.setStroke(new BasicStroke(thickness));
            g2d.drawRoundRect(x, y, width - thickness, height - thickness, radius, radius);
            g2d.dispose();
        }

        @Override
        public Insets getBorderInsets(Component c) {
            return new Insets(thickness, thickness, thickness, thickness);
        }
    }
}